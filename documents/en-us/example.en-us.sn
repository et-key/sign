`Strings are defined by backQuort`
`Start or middle lines containing only literals that don't make sense are not executed. Therefore, the line above is not executed.`
`Even if a line contains only a literal, if it's the last line of a function, it will be returned as the result.`
`Therefore, comments are written as strings.`

`Newline is a postfix operator that "evaluates".`
`If you don't want a newline to represent evaluation, use \, which is the character designator.
`Line-start indent forms a block.`

`The typical evaluation strategy for this language is lazy evaluation.`

`In English, ":" means "that is," so it's an assignment operator, while "=" remains purely a comparison operator.`

x : -353.15134
y : 4001.35364502

Hello : `Hello`
World : `World`

`'true' represents all valid values, while 'false' is an empty list or an unevaluated lambda expression.`
`_ also retains its function as an id`

yep : 0
nop : _

`An assignment operator not within a block is a right identity element.`

unit : none : []

`The above has the same meaning as the following syntax:`

none : []
unit : []


`Comparison operations have shorthands.`

`[[x = y & y] = z] & y`

x = y = z

`[[1 <= x & x] <= 9] & x`

1 <= x <= 9


`Lambda term definition method`
`The basis of lambda terms uses '?'.`
`Functions without assignment must be enclosed in parentheses.`

[x y ? x ^ 2 + 2 * x * y + y ^ 2]


`Factoring the above shows that this expression is equivalent to the following.`
`By reinterpreting parentheses purely as the start of a block definition, expression precedence can be expressed.`

[x y ? (x + y) ^ 2]

`Further simplification can be achieved using point-free style and function composition.`
`Point-free function descriptions, being direct operator descriptions, have a self-evident type.`
`Once a function is formed, it loses its operator precedence, and function composition becomes a left identity.`

[+] [^ 2]

`If you want to prioritize [^2] in point-free notation...`

[^ 2] [+]

`...it would be.`


`If you don't want function application or composition, you can append a comma directly after the function to create a Cartesian product.`
`Alternatively, you can use the '$' prefix operator before the function to obtain a temporary address.`

[+ 2] 2 = 4
[+ 2], 2 = [+ 2], 2


`Example of passing a function as a Cartesian product`

Filter : f x ~y ? f x , Filter f y~
Filter [> 0], [-2 ~ 3]


`Example in the case of a function pointer`

Filter : f x ~y ? @f x , Filter f y~
Filter $[> 0] [-2 ~ 3]


`The very last argument of a function can also be written before the function.`

result2 : [-] 3 1
add : [+]
exp : [^]
id : x ? x


`Function evaluation has lower precedence than lambda definition.`
`Function composition is a left identity, but normal function execution can be written as a right identity.`
`There is no distinction between bracket types in this language.`

[+ 1] [* 2] 5 = [* 2]([+ 1] 5) = 12

`The following functions as a function that returns the head.`

[x ? x] 1 2 3 = 1
[x ? x] 1, 2, 3 = 1

[1 2 3] ' 0 = 1
[1, 2, 3] ' 0 = 1


`The following functions as a function that returns the tail.`

[_ ~y ? y] 1 2 3 = 2 3
[_ ~y ? y] 1, 2, 3 = 2 3

[1 2 3] ' 1~ = 2 3
[1, 2, 3] ' 1~ = 2 3


`Arguments passed to higher-order functions must be explicitly separated by Cartesian product to determine whether they are evaluated or not.`

`match_case can be written using block syntax as follows:`
`The block serves as a guard notation.`
`This is also the true nature of block-scoped assignment operators.`
`If you assign the block itself or enclose it in parentheses for immediate generation, it's just like a regular function.`
`When using lambdas anonymously, they must be enclosed in parentheses.`

[x ?
	x = 0 : 0
	x > 0 : `more`
	x < 0 : `less`
	`other_wise`
] 3

`The above is replaced by the following in preprocessing.`
`Key points here...`
`0 is true`
`_ or an empty list, or an unevaluated function, is false`

[x ?
	x = 0 & 0 |
	x > 0 & `more` |
	x < 0 & `less` |
	`other_wise`
] 3

`Constructor-like description.`
`Dynamic key names can also be assigned; in such cases, to force extraction of values assigned to variables or arguments, use prefix @ and prefix $.`

Person : name age etc x ?
	name
	age
	@$etc : x

john : Person `john` 18 `Like` `Sushi`

`The 'get' operator treats 5 types equivalently: identifier, number, character, string, and type of type.`

john ' name = john ' `name`

`This is also equivalent to match_case, and this notation can replicate 'if then'.`
`If 'otherwise' is not specified and 'otherwise' is matched, it returns the passed value as is, following the identity law.`

[> 3 : [+ 3]] 3 4 = 4


`Data class-like description`

Item :
	name
	duration
	equip
	use
	effect

medicalWeed : Item
	`medicalWeed`
	1
	_
	[' amount] [- 1]
	[' HP] [+ 20]

lightningStaff : Item
	`lightningStaff`
	50
	[' Atk] [+ 8]
	[' ThunderBolt]
	[' HP] [- 40]


`The so-called 'let ~ in' is also written as follows.`

myValue :
	3
	[+ 4]
	[* 2]


`List definitions are generally comma-separated.`
`"," in English denotes a "strong separator" or "Cartesian product."`
`" " is used for "coproduct."`
`In the case of coproducts of scalar types, the comma can be omitted.`
`It's also clear why lambda evaluation has lower precedence than other expressions or terms.`
`The way lists function as iterators is evident when observing their form without omitted head functions.`
`It brilliantly reproduces the idea that implementation is type.`
`Similarly, the adjoint functor theorem's adjoint relationship between "," and " " is also evident.`

myPairs: 1 2 3 4 5
myPairs0: [,] 1 2 3 4 5
myPairs1: 1, 2, 3, 4, 5

myPairs = myPairs0 = myPairs1

`Lists allow range selection.`

myPairs ' [1 ~ 3] = 2 3 4

`Therefore, higher-order descriptions can also be naturally performed; conceptually, this simply involves replacing commas with some function and folding.`
`Thus, folding (foldL) simply involves passing a list to a two-argument function, which aligns with LISP.`

[[,],] myPairs = [1], [2], [3], [4], [5]
[+] myPairs = 15

`Map can be achieved with this kind of notation.`

[* 2,] myPairs = 2 4 6 8 10

`A simple filter can be written as follows.`

[> 2,] myPairs = 3 4 5


`This is a coproduct (array concatenation).`

r: [1 2] [3 4]


`This is a Cartesian product (2D array).`

s: [1 2],[3 4]


`Dictionary type`
`However, opening and closing parentheses must always be paired.`

myGreet:
	greet: 
		hello: `hello,`
		welcome: `welcome,`
	world : ` world`


myGreet ' greet ' hello = `hello,`


`By using block scope, 'get' can be directly written within the block scope.`
`This block syntax, of course, also returns a value upon completion of the operation.`
`If a coproduct of results is possible within this block scope, it returns the coproduct.`

myGreet
	'greet
		'welcome
	'world
= `welcome, world`


`Values can be modified.`

myGreet
	'greet
		'welcome : `welcome to our `
	'world : `metaverse!`


`By inferring only primitive types, the actual type problem is designed to be solved.`
`All given names are definitions, and as they are self-evident types, the name *is* the type.`


`The '~' operator can only expand match_case, which mimics a dictionary type, onto the target scope.`
`If prefixed, it takes precedence over other terms; if postfixed, other terms take precedence.`

[
	y: 1
	n: 0
]~

y = 1


`The '@' postfix operator is for import. File names can be specified, and paths are also allowed.`
`If match_case can be treated as a dictionary type, the '~' operator can expand it to the scope above, so '@~' also allows imports usable within the file.`

io@
	say Hello World

`Since this is not a file-scoped import, the line below will return a "Say is not defined" error.`

say Hello World


`Expand to file scope for use.`

io@~

[* 4,] [+] [1 ~ 5] = 60

`A string is a list of characters.`
`A string represents the concatenation of characters.`
`Since a string is a list of characters, string concatenation has the same meaning as character concatenation.`

`Any single character after a '\' is always treated as a single character type value.`
`In the case of character concatenation, because it's fixed that '\' is followed by 1 character, if an ident or string appears, it's straightforwardly treated as string concatenation.`
`Scalar values are usually listed using space or comma, but in the case of character and string literals,`
`there are patterns where direct concatenation can represent concatenation, so those patterns are described.`
`A string is still a list of characters.`
`However, practical character value notation includes newline insertion or`

M: \M

My: M \y\ \D\o\m\e\s\t\i\c
My = M \y \  \D \o \m \e \s \t \i \c = `My Domestic`

	`Hello ` `World!` = `Hello World!`
	`Hello` \ `World!` = `Hello World!`
	\H `ello` \ `World` \! = `Hello World!`
	`Hello ` My `World!` = `Hello My Domestic World!`
	Hello \ My \ `World` \! = `Hello My Domestic World!`
	`Hello` \!\ My World \! = `Hello! My Domestic World!`

`Strings containing `\ backslashes can be defined. Note that it's not an escape sequence.`

`The definition of a string containing 'back_quort' treats 'back_quort' as a character and handles it with string concatenation (coproduct).`

`Sign\s ` \` `define a string literal`

`If you want to represent a string containing newlines, it will be written like a block.`
`The reason is that " " means "list concatenation, function composition, and function application."`
`If you want to include newlines.`

HWinEnter :
 `Hello` \
 `World!`


`"#" becomes the export prefix operator.`
`Regular functions always return the value of the last line, and match_case returns a value or function corresponding to the specified value.`
`The entire file is also a single function, but anything not indicated by 'export' (i.e., '#') will not leave its own scope.`

#myDict : name value ? name~ : value
#gets : name ? myDict ' name~


`Logical operators are short-circuited.`

_ & `me` = _
1 & `me` = `me`

_ | `me` = `me`
1 | `me` = 1
