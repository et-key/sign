{
  "sourceFile": ".\\sample_test.sn",
  "processorVersion": "0.1.0",
  "processDate": "2025-05-03T02:12:29.232Z",
  "blockCount": 35,
  "blocks": [
    {
      "blockId": 1,
      "originalText": "[x : 10]",
      "withParentheses": [
        "[",
        "x",
        ":",
        "[",
        "10",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "x"
        },
        "value": {
          "type": "Literal",
          "value": "10"
        }
      }
    },
    {
      "blockId": 2,
      "originalText": "[y : 20]",
      "withParentheses": [
        "[",
        "y",
        ":",
        "[",
        "20",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "y"
        },
        "value": {
          "type": "Literal",
          "value": "20"
        }
      }
    },
    {
      "blockId": 3,
      "originalText": "[z : x + y]",
      "withParentheses": [
        "[",
        "z",
        ":",
        "[",
        "[",
        "x",
        "+",
        "y",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "z"
        },
        "value": {
          "type": "BinaryOperation",
          "operator": "+",
          "left": {
            "type": "Identifier",
            "name": "x"
          },
          "right": {
            "type": "Identifier",
            "name": "y"
          }
        }
      }
    },
    {
      "blockId": 4,
      "originalText": "[hello : `Hello`]",
      "withParentheses": [
        "[",
        "hello",
        ":",
        "[",
        "`Hello`",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "hello"
        },
        "value": {
          "type": "Literal",
          "value": "`Hello`"
        }
      }
    },
    {
      "blockId": 5,
      "originalText": "[world : `World`]",
      "withParentheses": [
        "[",
        "world",
        ":",
        "[",
        "`World`",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "world"
        },
        "value": {
          "type": "Literal",
          "value": "`World`"
        }
      }
    },
    {
      "blockId": 6,
      "originalText": "[greeting : hello \\  world \\!]",
      "withParentheses": [
        "[",
        "greeting",
        ":",
        "[",
        "[",
        "hello",
        "\\ ",
        "world",
        "\\!",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "greeting"
        },
        "value": {
          "type": "List",
          "elements": [
            {
              "type": "Identifier",
              "name": "hello"
            },
            {
              "type": "Literal",
              "value": "\\ "
            },
            {
              "type": "Identifier",
              "name": "world"
            },
            {
              "type": "Literal",
              "value": "\\!"
            }
          ]
        }
      }
    },
    {
      "blockId": 7,
      "originalText": "[sum : x + y]",
      "withParentheses": [
        "[",
        "sum",
        ":",
        "[",
        "[",
        "x",
        "+",
        "y",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "sum"
        },
        "value": {
          "type": "BinaryOperation",
          "operator": "+",
          "left": {
            "type": "Identifier",
            "name": "x"
          },
          "right": {
            "type": "Identifier",
            "name": "y"
          }
        }
      }
    },
    {
      "blockId": 8,
      "originalText": "[product : x * y]",
      "withParentheses": [
        "[",
        "product",
        ":",
        "[",
        "[",
        "x",
        "*",
        "y",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "product"
        },
        "value": {
          "type": "BinaryOperation",
          "operator": "*",
          "left": {
            "type": "Identifier",
            "name": "x"
          },
          "right": {
            "type": "Identifier",
            "name": "y"
          }
        }
      }
    },
    {
      "blockId": 9,
      "originalText": "[power : x ^ 2]",
      "withParentheses": [
        "[",
        "power",
        ":",
        "[",
        "[",
        "x",
        "^",
        "2",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "power"
        },
        "value": {
          "type": "BinaryOperation",
          "operator": "^",
          "left": {
            "type": "Identifier",
            "name": "x"
          },
          "right": {
            "type": "Literal",
            "value": "2"
          }
        }
      }
    },
    {
      "blockId": 10,
      "originalText": "[factorial : 5!]",
      "withParentheses": [
        "[",
        "factorial",
        ":",
        "[",
        "5!",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "factorial"
        },
        "value": {
          "type": "Identifier",
          "name": "5!"
        }
      }
    },
    {
      "blockId": 11,
      "originalText": "[is_valid : x >= 0 & y <= 100]",
      "withParentheses": [
        "[",
        "is_valid",
        ":",
        "[",
        "[",
        "[",
        "x",
        ">=",
        "0",
        "]",
        "&",
        "[",
        "y",
        "<=",
        "100",
        "]",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "is_valid"
        },
        "value": {
          "type": "BinaryOperation",
          "operator": "&",
          "left": {
            "type": "BinaryOperation",
            "operator": ">=",
            "left": {
              "type": "Identifier",
              "name": "x"
            },
            "right": {
              "type": "Literal",
              "value": "0"
            }
          },
          "right": {
            "type": "BinaryOperation",
            "operator": "<=",
            "left": {
              "type": "Identifier",
              "name": "y"
            },
            "right": {
              "type": "Literal",
              "value": "100"
            }
          }
        }
      }
    },
    {
      "blockId": 12,
      "originalText": "[range : [1 ~ 10]]",
      "withParentheses": [
        "[",
        "range",
        ":",
        "[",
        "[",
        "[",
        "1",
        "~",
        "10",
        "]",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "range"
        },
        "value": {
          "type": "BinaryOperation",
          "operator": "~",
          "left": {
            "type": "Literal",
            "value": "1"
          },
          "right": {
            "type": "Literal",
            "value": "10"
          }
        }
      }
    },
    {
      "blockId": 13,
      "originalText": "[group_calc : [x + y] * [z - 5]]",
      "withParentheses": [
        "[",
        "group_calc",
        ":",
        "[",
        "[",
        "[",
        "x",
        "+",
        "[",
        "y",
        "]",
        "]",
        "*",
        "[",
        "[",
        "z",
        "]",
        "-",
        "5",
        "]",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "group_calc"
        },
        "value": {
          "type": "BinaryOperation",
          "operator": "*",
          "left": {
            "type": "BinaryOperation",
            "operator": "+",
            "left": {
              "type": "Identifier",
              "name": "x"
            },
            "right": {
              "type": "Identifier",
              "name": "y"
            }
          },
          "right": {
            "type": "BinaryOperation",
            "operator": "-",
            "left": {
              "type": "Identifier",
              "name": "z"
            },
            "right": {
              "type": "Literal",
              "value": "5"
            }
          }
        }
      }
    },
    {
      "blockId": 14,
      "originalText": "[person :\n\tname : `John`\n\tage : 30\n\tcontact :\n\t\temail : `john@example.com`\n\t\tphone : `555-1234`]",
      "withParentheses": [
        "[",
        "person",
        ":",
        "[",
        "[",
        "name",
        ":",
        "`John`",
        ",",
        "[",
        "age",
        ":",
        "30",
        "]",
        ",",
        "[",
        "contact",
        ":",
        "[",
        "email",
        ":",
        "`john@example.com`",
        "]",
        ",",
        "[",
        "phone",
        ":",
        "`555-1234`",
        "]",
        "]",
        "]",
        "]",
        "]"
      ],
      "expressionTree": null,
      "expressionTreeError": "式木の構築に失敗しました: 閉じカッコがありません: 位置 8"
    },
    {
      "blockId": 15,
      "originalText": "[add : a b ? a + b]",
      "withParentheses": [
        "[",
        "add",
        ":",
        "[",
        "[",
        "a",
        "b",
        "]",
        "?",
        "[",
        "[",
        "a",
        "+",
        "b",
        "]",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "add"
        },
        "value": {
          "type": "Lambda",
          "operator": "?",
          "left": [
            {
              "type": "Identifier",
              "name": "a"
            },
            {
              "type": "Identifier",
              "name": "b"
            }
          ],
          "right": {
            "type": "BinaryOperation",
            "operator": "+",
            "left": {
              "type": "Identifier",
              "name": "a"
            },
            "right": {
              "type": "Identifier",
              "name": "b"
            }
          }
        }
      }
    },
    {
      "blockId": 16,
      "originalText": "[multiply : a b ? a * b]",
      "withParentheses": [
        "[",
        "multiply",
        ":",
        "[",
        "[",
        "a",
        "b",
        "]",
        "?",
        "[",
        "[",
        "a",
        "*",
        "b",
        "]",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "multiply"
        },
        "value": {
          "type": "Lambda",
          "operator": "?",
          "left": [
            {
              "type": "Identifier",
              "name": "a"
            },
            {
              "type": "Identifier",
              "name": "b"
            }
          ],
          "right": {
            "type": "BinaryOperation",
            "operator": "*",
            "left": {
              "type": "Identifier",
              "name": "a"
            },
            "right": {
              "type": "Identifier",
              "name": "b"
            }
          }
        }
      }
    },
    {
      "blockId": 17,
      "originalText": "[power_fn : base exp ? base ^ exp]",
      "withParentheses": [
        "[",
        "power_fn",
        ":",
        "[",
        "[",
        "base",
        "exp",
        "]",
        "?",
        "[",
        "[",
        "base",
        "^",
        "exp",
        "]",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "power_fn"
        },
        "value": {
          "type": "Lambda",
          "operator": "?",
          "left": [
            {
              "type": "Identifier",
              "name": "base"
            },
            {
              "type": "Identifier",
              "name": "exp"
            }
          ],
          "right": {
            "type": "BinaryOperation",
            "operator": "^",
            "left": {
              "type": "Identifier",
              "name": "base"
            },
            "right": {
              "type": "Identifier",
              "name": "exp"
            }
          }
        }
      }
    },
    {
      "blockId": 18,
      "originalText": "[calc : x y ? [x + y] + [x - y] + [x * y]]",
      "withParentheses": [
        "[",
        "calc",
        ":",
        "[",
        "[",
        "x",
        "y",
        "]",
        "?",
        "[",
        "[",
        "[",
        "x",
        "+",
        "[",
        "y",
        "]",
        "]",
        "+",
        "[",
        "[",
        "x",
        "]",
        "-",
        "[",
        "y",
        "]",
        "]",
        "+",
        "[",
        "[",
        "x",
        "*",
        "y",
        "]",
        "]",
        "]",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "calc"
        },
        "value": {
          "type": "Lambda",
          "operator": "?",
          "left": [
            {
              "type": "Identifier",
              "name": "x"
            },
            {
              "type": "Identifier",
              "name": "y"
            }
          ],
          "right": {
            "type": "BinaryOperation",
            "operator": "+",
            "left": {
              "type": "BinaryOperation",
              "operator": "+",
              "left": {
                "type": "BinaryOperation",
                "operator": "+",
                "left": {
                  "type": "Identifier",
                  "name": "x"
                },
                "right": {
                  "type": "Identifier",
                  "name": "y"
                }
              },
              "right": {
                "type": "BinaryOperation",
                "operator": "-",
                "left": {
                  "type": "Identifier",
                  "name": "x"
                },
                "right": {
                  "type": "Identifier",
                  "name": "y"
                }
              }
            },
            "right": {
              "type": "BinaryOperation",
              "operator": "*",
              "left": {
                "type": "Identifier",
                "name": "x"
              },
              "right": {
                "type": "Identifier",
                "name": "y"
              }
            }
          }
        }
      }
    },
    {
      "blockId": 19,
      "originalText": "[matchTest : x y ?\n\tx < y : x\n\tx = y : y\n\tx + y]",
      "withParentheses": [
        "[",
        "matchTest",
        ":",
        "[",
        "[",
        "x",
        "y",
        "]",
        "?",
        "[",
        "[",
        "[",
        "[",
        "x",
        "<",
        "y",
        "]",
        ":",
        "x",
        "]",
        ",",
        "[",
        "[",
        "x",
        "=",
        "y",
        "]",
        ":",
        "y",
        "]",
        ",",
        "[",
        "x",
        "+",
        "y",
        "]",
        "]",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "matchTest"
        },
        "value": {
          "type": "Lambda",
          "operator": "?",
          "left": [
            {
              "type": "Identifier",
              "name": "x"
            },
            {
              "type": "Identifier",
              "name": "y"
            }
          ],
          "right": {
            "type": "List",
            "elements": [
              {
                "type": "ConditionalClause",
                "operator": "]",
                "condition": {
                  "type": "BinaryOperation",
                  "operator": "<",
                  "left": {
                    "type": "Identifier",
                    "name": "x"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "y"
                  }
                },
                "result": {
                  "type": "Identifier",
                  "name": "x"
                }
              },
              {
                "type": "ConditionalClause",
                "operator": "]",
                "condition": {
                  "type": "BinaryOperation",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "x"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "y"
                  }
                },
                "result": {
                  "type": "Identifier",
                  "name": "y"
                }
              },
              {
                "type": "BinaryOperation",
                "operator": "+",
                "left": {
                  "type": "Identifier",
                  "name": "x"
                },
                "right": {
                  "type": "Identifier",
                  "name": "y"
                }
              }
            ]
          }
        }
      }
    },
    {
      "blockId": 20,
      "originalText": "[result1 : add 5 10]",
      "withParentheses": [
        "[",
        "result1",
        ":",
        "[",
        "[",
        "add",
        "5",
        "10",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "result1"
        },
        "value": {
          "type": "List",
          "elements": [
            {
              "type": "Identifier",
              "name": "add"
            },
            {
              "type": "Literal",
              "value": "5"
            },
            {
              "type": "Literal",
              "value": "10"
            }
          ]
        }
      }
    },
    {
      "blockId": 21,
      "originalText": "[result2 : multiply 4 8]",
      "withParentheses": [
        "[",
        "result2",
        ":",
        "[",
        "[",
        "multiply",
        "4",
        "8",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "result2"
        },
        "value": {
          "type": "List",
          "elements": [
            {
              "type": "Identifier",
              "name": "multiply"
            },
            {
              "type": "Literal",
              "value": "4"
            },
            {
              "type": "Literal",
              "value": "8"
            }
          ]
        }
      }
    },
    {
      "blockId": 22,
      "originalText": "[list1 : 1 2 3 4 5]",
      "withParentheses": [
        "[",
        "list1",
        ":",
        "[",
        "[",
        "1",
        "2",
        "3",
        "4",
        "5",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "list1"
        },
        "value": {
          "type": "List",
          "elements": [
            {
              "type": "Literal",
              "value": "1"
            },
            {
              "type": "Literal",
              "value": "2"
            },
            {
              "type": "Literal",
              "value": "3"
            },
            {
              "type": "Literal",
              "value": "4"
            },
            {
              "type": "Literal",
              "value": "5"
            }
          ]
        }
      }
    },
    {
      "blockId": 23,
      "originalText": "[list2 : 1, 2, 3, 4, 5]",
      "withParentheses": [
        "[",
        "list2",
        ":",
        "[",
        "[",
        "1",
        ",",
        "[",
        "2",
        ",",
        "[",
        "3",
        ",",
        "[",
        "4",
        ",",
        "5",
        "]",
        "]",
        "]",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "list2"
        },
        "value": {
          "type": "BinaryOperation",
          "operator": ",",
          "left": {
            "type": "Literal",
            "value": "1"
          },
          "right": {
            "type": "BinaryOperation",
            "operator": ",",
            "left": {
              "type": "Literal",
              "value": "2"
            },
            "right": {
              "type": "BinaryOperation",
              "operator": ",",
              "left": {
                "type": "Literal",
                "value": "3"
              },
              "right": {
                "type": "BinaryOperation",
                "operator": ",",
                "left": {
                  "type": "Literal",
                  "value": "4"
                },
                "right": {
                  "type": "Literal",
                  "value": "5"
                }
              }
            }
          }
        }
      }
    },
    {
      "blockId": 24,
      "originalText": "[combined : list1 list2]",
      "withParentheses": [
        "[",
        "combined",
        ":",
        "[",
        "[",
        "list1",
        "list2",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "combined"
        },
        "value": {
          "type": "List",
          "elements": [
            {
              "type": "Identifier",
              "name": "list1"
            },
            {
              "type": "Identifier",
              "name": "list2"
            }
          ]
        }
      }
    },
    {
      "blockId": 25,
      "originalText": "[neg : !true]",
      "withParentheses": [
        "[",
        "neg",
        ":",
        "[",
        "!true",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "neg"
        },
        "value": {
          "type": "Identifier",
          "name": "!true"
        }
      }
    },
    {
      "blockId": 26,
      "originalText": "[spread : ~combined]",
      "withParentheses": [
        "[",
        "spread",
        ":",
        "[",
        "~combined",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "spread"
        },
        "value": {
          "type": "Identifier",
          "name": "~combined"
        }
      }
    },
    {
      "blockId": 27,
      "originalText": "[tail : x ~y ? y]",
      "withParentheses": [
        "[",
        "tail",
        ":",
        "[",
        "[",
        "x",
        "~y",
        "]",
        "?",
        "[",
        "y",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "tail"
        },
        "value": {
          "type": "Lambda",
          "operator": "?",
          "left": [
            {
              "type": "Identifier",
              "name": "x"
            },
            {
              "type": "Identifier",
              "name": "~y"
            }
          ],
          "right": {
            "type": "Identifier",
            "name": "y"
          }
        }
      }
    },
    {
      "blockId": 28,
      "originalText": "[factorials : 3! 4! 5!]",
      "withParentheses": [
        "[",
        "factorials",
        ":",
        "[",
        "[",
        "3!",
        "4!",
        "5!",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "factorials"
        },
        "value": {
          "type": "List",
          "elements": [
            {
              "type": "Identifier",
              "name": "3!"
            },
            {
              "type": "Identifier",
              "name": "4!"
            },
            {
              "type": "Identifier",
              "name": "5!"
            }
          ]
        }
      }
    },
    {
      "blockId": 29,
      "originalText": "[mapped_double : [* 2,] list1]",
      "withParentheses": [
        "[",
        "mapped_double",
        ":",
        "[",
        "[",
        "[",
        "*",
        "2",
        ",",
        "]",
        "]",
        "list1",
        "]",
        "]"
      ],
      "expressionTree": null,
      "expressionTreeError": "式木の構築に失敗しました: 閉じカッコがありません: 位置 11"
    },
    {
      "blockId": 30,
      "originalText": "[reduced_sum : [+] list2]",
      "withParentheses": [
        "[",
        "reduced_sum",
        ":",
        "[",
        "[",
        "+",
        "]",
        "list2",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "reduced_sum"
        },
        "value": {
          "type": "PointFreeApplication",
          "operator": "+",
          "argument": {
            "type": "Identifier",
            "name": "list2"
          }
        }
      }
    },
    {
      "blockId": 31,
      "originalText": "[range_list : 1 ~ 5]",
      "withParentheses": [
        "[",
        "range_list",
        ":",
        "[",
        "[",
        "1",
        "~",
        "5",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "range_list"
        },
        "value": {
          "type": "BinaryOperation",
          "operator": "~",
          "left": {
            "type": "Literal",
            "value": "1"
          },
          "right": {
            "type": "Literal",
            "value": "5"
          }
        }
      }
    },
    {
      "blockId": 32,
      "originalText": "[rest_args : a ~args ? a args~]",
      "withParentheses": [
        "[",
        "rest_args",
        ":",
        "[",
        "[",
        "a",
        "~args",
        "]",
        "?",
        "[",
        "[",
        "a",
        "args~",
        "]",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "rest_args"
        },
        "value": {
          "type": "Lambda",
          "operator": "?",
          "left": [
            {
              "type": "Identifier",
              "name": "a"
            },
            {
              "type": "Identifier",
              "name": "~args"
            }
          ],
          "right": {
            "type": "List",
            "elements": [
              {
                "type": "Identifier",
                "name": "a"
              },
              {
                "type": "Identifier",
                "name": "args~"
              }
            ]
          }
        }
      }
    },
    {
      "blockId": 33,
      "originalText": "[abs : x ?\n\tx >= 0 : x\n\tx < 0 : -x]",
      "withParentheses": [
        "[",
        "abs",
        ":",
        "[",
        "x",
        "?",
        "[",
        "[",
        "[",
        "[",
        "x",
        ">=",
        "0",
        "]",
        ":",
        "x",
        "]",
        ",",
        "[",
        "[",
        "x",
        "<",
        "0",
        "]",
        ":",
        "-x",
        "]",
        "]",
        "]",
        "]",
        "]"
      ],
      "expressionTree": {
        "type": "Define",
        "operator": "]",
        "identifier": {
          "type": "Identifier",
          "name": "abs"
        },
        "value": {
          "type": "Lambda",
          "operator": "?",
          "left": [
            {
              "type": "Identifier",
              "name": "x"
            }
          ],
          "right": {
            "type": "List",
            "elements": [
              {
                "type": "ConditionalClause",
                "operator": "]",
                "condition": {
                  "type": "BinaryOperation",
                  "operator": ">=",
                  "left": {
                    "type": "Identifier",
                    "name": "x"
                  },
                  "right": {
                    "type": "Literal",
                    "value": "0"
                  }
                },
                "result": {
                  "type": "Identifier",
                  "name": "x"
                }
              },
              {
                "type": "ConditionalClause",
                "operator": "]",
                "condition": {
                  "type": "BinaryOperation",
                  "operator": "<",
                  "left": {
                    "type": "Identifier",
                    "name": "x"
                  },
                  "right": {
                    "type": "Literal",
                    "value": "0"
                  }
                },
                "result": {
                  "type": "Identifier",
                  "name": "-x"
                }
              }
            ]
          }
        }
      }
    },
    {
      "blockId": 34,
      "originalText": "[complex : this :\n\tdata :\n\t\t1 2 3,\n\t\t4 5 6,\n\t\t7 8 9\n\ttransform : x y ? this ' data ' x * this ' data ' y + 1]",
      "withParentheses": [
        "[",
        "[",
        "complex",
        ":",
        "[",
        "this",
        ":",
        "[",
        "data",
        ":",
        "[",
        "[",
        "1",
        "2",
        "[",
        "3",
        "]",
        "]",
        ",",
        "[",
        "4",
        "5",
        "6",
        "]",
        ",",
        "[",
        "[",
        "7",
        "8",
        "9",
        "]",
        "]",
        "]",
        "transform",
        ":",
        "[",
        "x",
        "y",
        "]",
        "?",
        "[",
        "[",
        "[",
        "[",
        "this",
        "'",
        "[",
        "data",
        "]",
        "'",
        "x",
        "]",
        "*",
        "[",
        "this",
        "'",
        "[",
        "data",
        "]",
        "'",
        "y",
        "]",
        "]",
        "+",
        "1",
        "]",
        "]",
        "]",
        "]",
        "]",
        "]"
      ],
      "expressionTree": null,
      "expressionTreeError": "式木の構築に失敗しました: 閉じカッコがありません: 位置 33"
    },
    {
      "blockId": 35,
      "originalText": "[complex ' data ' 0 ' 1 = 2]",
      "withParentheses": [
        "[",
        "[",
        "[",
        "complex",
        "'",
        "[",
        "data",
        "]",
        "'",
        "[",
        "0",
        "]",
        "'",
        "1",
        "]",
        "=",
        "2",
        "]",
        "]"
      ],
      "expressionTree": null,
      "expressionTreeError": "式木の構築に失敗しました: 閉じカッコがありません: 位置 8"
    }
  ]
}