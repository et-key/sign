` Sign言語サンプルコード - 数学関数ライブラリ

` 基本的な数学関数
increment : _0 ? _0 + 1
decrement : _0 ? _0 - 1
double : _0 ? _0 * 2
square : _0 ? _0^2

` 二項演算関数  
add : _0 _1 ?  _0+_1
subtract : _0 _1 ?  _0-_1
multiply : _0 _1 ?  _0*_1
divide : _0 _1 ?  _0/_1
power : _0 _1 ?  _0^_1

` 条件分岐を含む関数
absolute : _0 ?

 x>=0 : x
 -x

classify : _0 ?

 n = 0:'zero'
 n > 0:'positive'
 n < 0:'negative'

grade : _0 ?

 score>=90:'A'
 score>=80:'B' 
 score>=70:'C'
 score>=60:'D'
 'F'

` 再帰関数
#factorial : _0 ?

 n<=1 : 1
 n * factorial(n - 1)

fibonacci : _0 ?

 n<=1 : n
 fibonacci(,n,-,1,) + fibonacci(n - 2)

` 高階関数（リスト処理）
map : _0 _1 ~_2 ?

 !list : _
 @f list,map f rest~

fold : _0 _1 _2 ~_3 ?

 !list : init
 fold f (@f init list) rest~

` エクスポートされた関数
#sum : _0 ? fold [+] 0 _0
#product : _0 ? fold [*] 1 _0
#length : _0 ? fold [x y ? y+1] 0 _0

` 実用的な関数
max : _0 _1 ?

 x > y : x
 y

min : _0 _1 ?

 x < y : x 
 y

clamp : _0 _1 _2 ?

 value < low:low
 value > high:high
 value

` ユーティリティ関数
isEven : _0 ? _0%2 = 0
isOdd : _0 ? _0%2 = 1
isPrime : _0 ?

 n<=1 : _
 n = 2:n
 n%2 = 0:_
 checkPrime n 3

checkPrime : _0 _1 ?

 divisor * divisor>n : n
 n%divisor = 0:_
 checkPrime n (divisor + 2)