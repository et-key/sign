{
  "success": true,
  "originalCode": "` reference\\Hint\\Impl_Preprocessor.md より例文\r\n\r\n` ######################################################################\r\n` 1. 引数名の標準化と位置ベース変換\r\n` 原始構文\r\nincrement : n ? n + 1\r\nadd : x y ? x + y\r\n\r\nL : x ? x\r\nR : _ ~x ? x\r\n\r\nmap : f x ~y ? @f x, map f y~\r\n\r\nfoldr : f i l ~r ?\r\n\t!l : i\r\n\t@f l foldr f i r~\r\n\r\n` ######################################################################\r\n` 2. 部分適用と引数順序変換\r\n` 原始構文\r\ntwice : f ? f f\r\nflip : f x y ? f y x\r\nf : x y z ? x * y + z\r\ng : f 2 _ 3\r\n` ↓動確用追加確認\r\ng2 : f _ 5 _\r\n\r\n` ######################################################################\r\n` 3. メモリサイズと使用回数に基づくプリプロセス可能な最適化戦略\r\n` ↓動確用追加確認\r\n`テストケース1: 基本的な演算子インライン展開\r\nadd : [+]\r\nmul : [*]\r\nsub : [-]\r\n\r\nresult1 : add 5 7\r\nresult2 : mul 3 4\r\nresult3 : sub 10 2\r\n\r\n`期待される変換結果:\r\n`result1 : [+] 5 7\r\n`result2 : [*] 3 4\r\n`result3 : [-] 10 2\r\n\r\n`テストケース2: 複合演算子と演算子チェーン\r\npow2 : [^ 2]\r\ninc : [+ 1]\r\nhalf : [/ 2]\r\n\r\nsquare_and_add_ten : [pow2] [+ 10]\r\n\r\nvalue1 : inc 5\r\nvalue2 : pow2 4\r\nvalue3 : square_and_add_ten 3\r\nvalue4 : [inc] [pow2] 4\r\n\r\n`期待される変換結果:\r\n`value1 : [+ 1] 5\r\n`value2 : [^ 2] 4\r\n`value3 : [[^ 2]] [+ 10] 3\r\n`value4 : [[+ 1]] [[^ 2]] 4\r\n\r\n`テストケース3: 部分適用とUnit演算子の組み合わせ\r\n`※最小版ではラムダ式を含む定義はインライン展開しない\r\nadd_n : [+] _\r\nmul_by : _ [*]\r\nbetween : _ < _ < _\r\n\r\nadd5 : add_n 5\r\ntriple : mul_by 3\r\nin_range : between 0 _ 100\r\nvalue5 : add5 10\r\nvalue6 : triple 7\r\nvalid : in_range 42\r\n\r\n`期待される変換結果:\r\n`add5 : _0 ? [+] _0 5\r\n`triple : _0 ? _0 [*] 3\r\n`in_range : _0 ? 0 < _0 < 100\r\n`value5 : [_0 ? [+] _0 5] 10\r\n`value6 : [_0 ? _0 [*] 3] 7\r\n`valid : [_0 ? 0 < _0 < 100] 42\r\n\r\n`テストケース4: 高階関数とリスト処理\r\n`map_1 : [* 2,]\r\n`filter : [> 5,]\r\nreduce : [+]\r\n\r\ndoubled : map_1 1 2 3 4\r\nfiltered : filter 3 7 2 9\r\nsum : reduce 1 2 3 4\r\n\r\n`期待される変換結果:\r\n`doubled : [* 2,] 1 2 3 4\r\n`filtered : [> 5,] 3 7 2 9 \r\n`sum : [+] 1 2 3 4\r\n\r\n`テストケース5: 複雑な組み合わせ\r\naverage : [/] [+] _ (length _)\r\n`square_sum : [+] ([^ 2,] _)\r\napply_twice : f ? f f\r\n\r\navg_value : average 1 2 3 4\r\nsquares : square_sum 1 2 3\r\ntwice_inc : apply_twice inc\r\nvalue7 : twice_inc 5\r\n\r\n`期待される変換結果:\r\n`avg_value : [/] [+] 1 2 3 4 (length 1 2 3 4)\r\n`squares : [+] ([^ 2,] 1 2 3)\r\n`twice_inc : f ? f f\r\n`value7 : [f ? f f] [+ 1] 5\r\n\r\n`テストケース6: エッジケース\r\ncompose : f g ? f g _\r\nidentity : x ? x\r\nnop : _\r\n\r\ninc_then_double : compose mul inc\r\npass_through : identity 42\r\nempty : nop\r\n\r\n`期待される変換結果:\r\n`inc_then_double : [f g ? f g _] [*] [+ 1]\r\n`pass_through : [x ? x] 42\r\n`empty : _\r\n\r\n\r\n` ######################################################################\r\n` 4. 比較演算の多項式の最適変換（初期段階では必要だが、最適化フェーズでは不要？）\r\n` 原式\r\n` 3 < x = y < 20 \r\n` 変換後\r\n` [[[3 < x & x] = y & y] < 20] & y\r\n` 原式\r\n` 1 <= x <= 100\r\n` 変換後\r\n` [[1 <= x & x] <= 100] & x\r\n` ※変換しないほうが最適化しやすい見込み。実装しない\r\n\r\n` ######################################################################\r\n` 5. ブロック構文による条件分岐（match case対応）\r\n` ### 5.1 基本変換パターン\r\n` 原始構文（構文解析エラーのため一旦コメント）\r\n` func : x ?\r\n` \tcondition1 : result1\r\n` \tcondition2 : result2\r\n` \tcondition3 : result3\r\n` \tdefault_result\r\n\r\n` ### 5.3 変換例\r\n` #### 数値分類\r\n` 原始構文\r\nclassify : n ?\r\n\tn = 0 : `zero`\r\n\tn > 0 : `positive`\r\n\tn < 0 : `negative`\r\n\r\n` #### 範囲チェック\r\n` 原始構文\r\ngrade : score ?\r\n\tscore >= 90 : `A`\r\n\tscore >= 80 : `B`\r\n\tscore >= 70 : `C`\r\n\tscore >= 60 : `D`\r\n\t`F`\r\n\r\n` #### 複数引数での条件分岐\r\n` 原始構文\r\ncompare : x y ?\r\n\tx > y : `greater`\r\n\tx = y : `equal`\r\n\tx < y : `less`\r\n\r\n` #### 複雑な条件\r\n` 原始構文\r\naccess_check : user role ?\r\n\tuser = `admin` : `full_access`\r\n\trole = `moderator` & user != `guest` : `moderate_access`\r\n\tuser != _ : `basic_access`\r\n\t`no_access`\r\n",
  "preprocessedCode": "` reference\\Hint\\Impl_Preprocessor.md より例文\r\n\r\n` ######################################################################\r\n` 1. 引数名の標準化と位置ベース変換\r\n` 原始構文\r\nincrement : _0 ? _0 + 1\r\nadd : _0 _1 ? _0 + _1\r\n\r\nL : _0 ? _0\r\nR : _0 ~_1 ? ~_1\r\n\r\nmap : _0 _1 ~_2 ? @_0 _1 , map _0 ~_2~\r\n\r\nfoldr : _0 _1 _2 ~_3 ? \r\n\t!_2 & _1 | \n\t@_0 _2 foldr _0 _1 ~_3~\n` ######################################################################\r\n` 2. 部分適用と引数順序変換\r\n` 原始構文\r\ntwice : _0 ? _0 _0\r\nflip : _0 _1 _2 ? _0 _2 _1\r\n_0 : _0 _1 _2 ? _0 * _1 + _2\r\ng : f 2 _ 3\r\n` ↓動確用追加確認\r\ng2 : f _ 5 _\r\n\r\n` ######################################################################\r\n` 3. メモリサイズと使用回数に基づくプリプロセス可能な最適化戦略\r\n` ↓動確用追加確認\r\n`テストケース1 : 基本的な演算子インライン展開\r\nadd : [ + ]\r\nmul : [ * ]\r\nsub : [ - ]\r\n\r\nresult1 : add 5 7\r\nresult2 : mul 3 4\r\nresult3 : sub 10 2\r\n\r\n`期待される変換結果 : \r\n`result1 : [ + ] 5 7\r\n`result2 : [ * ] 3 4\r\n`result3 : [ - ] 10 2\r\n\r\n`テストケース2 : 複合演算子と演算子チェーン\r\npow2 : [ ^ 2]\r\ninc : [ + 1]\r\nhalf : [ / 2]\r\n\r\nsquare_and_add_ten : [pow2] [ + 10]\r\n\r\nvalue1 : inc 5\r\nvalue2 : pow2 4\r\nvalue3 : square_and_add_ten 3\r\nvalue4 : [inc] [pow2] 4\r\n\r\n`期待される変換結果 : \r\n`value1 : [ + 1] 5\r\n`value2 : [ ^ 2] 4\r\n`value3 : [[ ^ 2]] [ + 10] 3\r\n`value4 : [[ + 1]] [[ ^ 2]] 4\r\n\r\n`テストケース3 : 部分適用とUnit演算子の組み合わせ\r\n`※最小版ではラムダ式を含む定義はインライン展開しない\r\nadd_n : [ + ] _\r\nmul_by : _ [ * ]\r\nbetween : _ < _ < _\r\n\r\nadd5 : add_n 5\r\ntriple : mul_by 3\r\nin_range : between 0 _ 100\r\nvalue5 : add5 10\r\nvalue6 : triple 7\r\nvalid : in_range 42\r\n\r\n`期待される変換結果 : \r\n`add5 : _0 ? [ + ] _0 5\r\n`triple : _0 ? _0 [ * ] 3\r\n`in_range : _0 ? 0 < _0 < 100\r\n`value5 : [_0 ? [ + ] _0 5] 10\r\n`value6 : [_0 ? _0 [ * ] 3] 7\r\n`valid : [_0 ? 0 < _0 < 100] 42\r\n\r\n`テストケース4 : 高階関数とリスト処理\r\n`map_1 : [ * 2 , ]\r\n`filter : [ > 5 , ]\r\nreduce : [ + ]\r\n\r\ndoubled : map_1 1 2 3 4\r\nfiltered : filter 3 7 2 9\r\nsum : reduce 1 2 3 4\r\n\r\n`期待される変換結果 : \r\n`doubled : [ * 2 , ] 1 2 3 4\r\n`filtered : [ > 5 , ] 3 7 2 9 \r\n`sum : [ + ] 1 2 3 4\r\n\r\n`テストケース5 : 複雑な組み合わせ\r\naverage : [ / ] [ + ] _ (length _)\r\n`square_sum : [ + ] ([ ^ 2 , ] _)\r\napply_twice : _0 ? _0 _0\r\n\r\navg_value : average 1 2 3 4\r\nsquares : square_sum 1 2 3\r\ntwice_inc : apply_twice inc\r\nvalue7 : twice_inc 5\r\n\r\n`期待される変換結果 : \r\n`avg_value : [ / ] [ + ] 1 2 3 4 (length 1 2 3 4)\r\n`squares : [ + ] ([ ^ 2 , ] 1 2 3)\r\n`twice_inc : _0 ? _0 _0\r\n`value7 : [_0 ? _0 _0] [ + 1] 5\r\n\r\n`テストケース6 : エッジケース\r\ncompose : _0 _1 ? _0 _1 _\r\nidentity : _0 ? _0\r\nnop : _\r\n\r\ninc_then_double : compose mul inc\r\npass_through : identity 42\r\nempty : nop\r\n\r\n`期待される変換結果 : \r\n`inc_then_double : [_0 _1 ? _0 _1 _] [ * ] [ + 1]\r\n`pass_through : [_0 ? _0] 42\r\n`empty : _\r\n\r\n\r\n` ######################################################################\r\n` 4. 比較演算の多項式の最適変換（初期段階では必要だが、最適化フェーズでは不要？）\r\n` 原式\r\n` 3 < _0 = y < 20 \r\n` 変換後\r\n` [[[3 < _0 & _0] = y & y] < 20] & y\r\n` 原式\r\n` 1 <= _0 <= 100\r\n` 変換後\r\n` [[1 <= _0 & _0] <= 100] & _0\r\n` ※変換しないほうが最適化しやすい見込み。実装しない\r\n\r\n` ######################################################################\r\n` 5. ブロック構文による条件分岐（match case対応）\r\n` ### 5.1 基本変換パターン\r\n` 原始構文（構文解析エラーのため一旦コメント）\r\n` func : _0 ? \r\n` \tcondition1 : result1\r\n` \tcondition2 : result2\r\n` \tcondition3 : result3\r\n` \tdefault_result\r\n\r\n` ### 5.3 変換例\r\n` #### 数値分類\r\n` 原始構文\r\nclassify : _0 ? \r\n\t_0 = 0 & `zero` | \n\t_0 > 0 & `positive` | \n\t_0 < 0 & `negative`\n` #### 範囲チェック\r\n` 原始構文\r\ngrade : _0 ? \r\n\t_0 >= 90 & `A` | \n\t_0 >= 80 & `B` | \n\t_0 >= 70 & `C` | \n\t_0 >= 60 & `D` | \n\t`F`\n` #### 複数引数での条件分岐\r\n` 原始構文\r\ncompare : _0 _1 ? \r\n\t_0 > _1 & `greater` | \n\t_0 = _1 & `equal` | \n\t_0 < _1 & `less`\n` #### 複雑な条件\r\n` 原始構文\r\naccess_check : _0 _1 ? \r\n\t_0 = `admin` & `full_access` | \n\t_1 = `moderator` & _0 != `guest` & `moderate_access` | \n\t_0 != _ & `basic_access` | \n\t`no_access`",
  "ast": {
    "type": "Program",
    "statements": [
      {
        "type": "Comment",
        "content": " reference\\Hint\\Impl_Preprocessor.md より例文"
      },
      {
        "type": "Comment",
        "content": " ######################################################################"
      },
      {
        "type": "Comment",
        "content": " 1. 引数名の標準化と位置ベース変換"
      },
      {
        "type": "Comment",
        "content": " 原始構文"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "increment"
        },
        "value": {
          "type": "LambdaExpression",
          "parameters": [
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_0"
              },
              "continuous": false
            }
          ],
          "body": {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        }
      },
      {
        "type": "BinaryOperation",
        "operator": "add",
        "left": {
          "type": "Integer",
          "value": 0,
          "raw": "0"
        },
        "right": {
          "type": "Integer",
          "value": 1,
          "raw": "1"
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "add"
        },
        "value": {
          "type": "LambdaExpression",
          "parameters": [
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_0"
              },
              "continuous": false
            },
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_1"
              },
              "continuous": false
            }
          ],
          "body": {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        }
      },
      {
        "type": "FunctionApplyExpression",
        "function": {
          "type": "Integer",
          "value": 0,
          "raw": "0"
        },
        "arguments": [
          {
            "type": "UnaryOperation",
            "operator": "unary_plus",
            "operand": {
              "type": "Unit",
              "semantics": [
                "empty_list",
                "identity_morphism",
                "unit_element"
              ]
            }
          }
        ]
      },
      {
        "type": "Integer",
        "value": 1,
        "raw": "1"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "L"
        },
        "value": {
          "type": "LambdaExpression",
          "parameters": [
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_0"
              },
              "continuous": false
            }
          ],
          "body": {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        }
      },
      {
        "type": "Integer",
        "value": 0,
        "raw": "0"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "R"
        },
        "value": {
          "type": "LambdaExpression",
          "parameters": [
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_0"
              },
              "continuous": false
            },
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_1"
              },
              "continuous": true
            }
          ],
          "body": {
            "type": "UnaryOperation",
            "operator": "continuous",
            "operand": {
              "type": "Unit",
              "semantics": [
                "empty_list",
                "identity_morphism",
                "unit_element"
              ]
            }
          }
        }
      },
      {
        "type": "Integer",
        "value": 1,
        "raw": "1"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "map"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "LambdaExpression",
            "parameters": [
              {
                "type": "Parameter",
                "name": {
                  "type": "Identifier",
                  "name": "_0"
                },
                "continuous": false
              },
              {
                "type": "Parameter",
                "name": {
                  "type": "Identifier",
                  "name": "_1"
                },
                "continuous": false
              },
              {
                "type": "Parameter",
                "name": {
                  "type": "Identifier",
                  "name": "_2"
                },
                "continuous": true
              }
            ],
            "body": {
              "type": "InputExpression",
              "address": {
                "type": "Identifier",
                "name": "_0"
              }
            }
          },
          "arguments": [
            {
              "type": "Unit",
              "semantics": [
                "empty_list",
                "identity_morphism",
                "unit_element"
              ]
            }
          ]
        }
      },
      {
        "type": "FunctionApplyExpression",
        "function": {
          "type": "ProductExpression",
          "elements": [
            {
              "type": "Integer",
              "value": 1,
              "raw": "1"
            },
            {
              "type": "Identifier",
              "name": "map"
            }
          ]
        },
        "arguments": [
          {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        ]
      },
      {
        "type": "FunctionApplyExpression",
        "function": {
          "type": "Integer",
          "value": 0,
          "raw": "0"
        },
        "arguments": [
          {
            "type": "UnaryOperation",
            "operator": "continuous",
            "operand": {
              "type": "Unit",
              "semantics": [
                "empty_list",
                "identity_morphism",
                "unit_element"
              ]
            }
          }
        ]
      },
      {
        "type": "UnaryOperation",
        "operator": "expand",
        "operand": {
          "type": "Integer",
          "value": 2,
          "raw": "2"
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "foldr"
        },
        "value": {
          "type": "LambdaExpression",
          "parameters": [
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_0"
              },
              "continuous": false
            },
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_1"
              },
              "continuous": false
            },
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_2"
              },
              "continuous": false
            },
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_3"
              },
              "continuous": true
            }
          ],
          "body": {
            "type": "IndentBlock",
            "expression": {
              "type": "UnaryOperation",
              "operator": "not",
              "operand": {
                "type": "Unit",
                "semantics": [
                  "empty_list",
                  "identity_morphism",
                  "unit_element"
                ]
              }
            }
          }
        }
      },
      {
        "type": "BinaryOperation",
        "operator": "and",
        "left": {
          "type": "Integer",
          "value": 2,
          "raw": "2"
        },
        "right": {
          "type": "Unit",
          "semantics": [
            "empty_list",
            "identity_morphism",
            "unit_element"
          ]
        }
      },
      {
        "type": "BinaryOperation",
        "operator": "or",
        "left": {
          "type": "Integer",
          "value": 1,
          "raw": "1"
        },
        "right": {
          "type": "IndentBlock",
          "expression": {
            "type": "FunctionApplyExpression",
            "function": {
              "type": "InputExpression",
              "address": {
                "type": "Identifier",
                "name": "_0"
              }
            },
            "arguments": [
              {
                "type": "Unit",
                "semantics": [
                  "empty_list",
                  "identity_morphism",
                  "unit_element"
                ]
              }
            ]
          }
        }
      },
      {
        "type": "FunctionApplyExpression",
        "function": {
          "type": "Integer",
          "value": 2,
          "raw": "2"
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "foldr"
          },
          {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        ]
      },
      {
        "type": "FunctionApplyExpression",
        "function": {
          "type": "Integer",
          "value": 0,
          "raw": "0"
        },
        "arguments": [
          {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        ]
      },
      {
        "type": "FunctionApplyExpression",
        "function": {
          "type": "Integer",
          "value": 1,
          "raw": "1"
        },
        "arguments": [
          {
            "type": "UnaryOperation",
            "operator": "continuous",
            "operand": {
              "type": "Unit",
              "semantics": [
                "empty_list",
                "identity_morphism",
                "unit_element"
              ]
            }
          }
        ]
      },
      {
        "type": "UnaryOperation",
        "operator": "expand",
        "operand": {
          "type": "Integer",
          "value": 3,
          "raw": "3"
        }
      },
      {
        "type": "Comment",
        "content": " ######################################################################"
      },
      {
        "type": "Comment",
        "content": " 2. 部分適用と引数順序変換"
      },
      {
        "type": "Comment",
        "content": " 原始構文"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "twice"
        },
        "value": {
          "type": "LambdaExpression",
          "parameters": [
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_0"
              },
              "continuous": false
            }
          ],
          "body": {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        }
      },
      {
        "type": "FunctionApplyExpression",
        "function": {
          "type": "Integer",
          "value": 0,
          "raw": "0"
        },
        "arguments": [
          {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        ]
      },
      {
        "type": "Integer",
        "value": 0,
        "raw": "0"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "flip"
        },
        "value": {
          "type": "LambdaExpression",
          "parameters": [
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_0"
              },
              "continuous": false
            },
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_1"
              },
              "continuous": false
            },
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_2"
              },
              "continuous": false
            }
          ],
          "body": {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        }
      },
      {
        "type": "FunctionApplyExpression",
        "function": {
          "type": "Integer",
          "value": 0,
          "raw": "0"
        },
        "arguments": [
          {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        ]
      },
      {
        "type": "FunctionApplyExpression",
        "function": {
          "type": "Integer",
          "value": 2,
          "raw": "2"
        },
        "arguments": [
          {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        ]
      },
      {
        "type": "Integer",
        "value": 1,
        "raw": "1"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "_0"
        },
        "value": {
          "type": "LambdaExpression",
          "parameters": [
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_0"
              },
              "continuous": false
            },
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_1"
              },
              "continuous": false
            },
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_2"
              },
              "continuous": false
            }
          ],
          "body": {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        }
      },
      {
        "type": "BinaryOperation",
        "operator": "mul",
        "left": {
          "type": "Integer",
          "value": 0,
          "raw": "0"
        },
        "right": {
          "type": "Unit",
          "semantics": [
            "empty_list",
            "identity_morphism",
            "unit_element"
          ]
        }
      },
      {
        "type": "FunctionApplyExpression",
        "function": {
          "type": "Integer",
          "value": 1,
          "raw": "1"
        },
        "arguments": [
          {
            "type": "UnaryOperation",
            "operator": "unary_plus",
            "operand": {
              "type": "Unit",
              "semantics": [
                "empty_list",
                "identity_morphism",
                "unit_element"
              ]
            }
          }
        ]
      },
      {
        "type": "Integer",
        "value": 2,
        "raw": "2"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "g"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "f"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 2,
              "raw": "2"
            },
            {
              "type": "Unit",
              "semantics": [
                "empty_list",
                "identity_morphism",
                "unit_element"
              ]
            },
            {
              "type": "Integer",
              "value": 3,
              "raw": "3"
            }
          ]
        }
      },
      {
        "type": "Comment",
        "content": " ↓動確用追加確認"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "g2"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "f"
          },
          "arguments": [
            {
              "type": "Unit",
              "semantics": [
                "empty_list",
                "identity_morphism",
                "unit_element"
              ]
            },
            {
              "type": "Integer",
              "value": 5,
              "raw": "5"
            },
            {
              "type": "Unit",
              "semantics": [
                "empty_list",
                "identity_morphism",
                "unit_element"
              ]
            }
          ]
        }
      },
      {
        "type": "Comment",
        "content": " ######################################################################"
      },
      {
        "type": "Comment",
        "content": " 3. メモリサイズと使用回数に基づくプリプロセス可能な最適化戦略"
      },
      {
        "type": "Comment",
        "content": " ↓動確用追加確認"
      },
      {
        "type": "Comment",
        "content": "テストケース1 : 基本的な演算子インライン展開"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "add"
        },
        "value": [
          "[",
          " ",
          {
            "type": "OperatorFunction",
            "operator": "add"
          },
          " ",
          "]"
        ]
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "mul"
        },
        "value": [
          "[",
          " ",
          {
            "type": "OperatorFunction",
            "operator": "mul"
          },
          " ",
          "]"
        ]
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "sub"
        },
        "value": [
          "[",
          " ",
          {
            "type": "OperatorFunction",
            "operator": "sub"
          },
          " ",
          "]"
        ]
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "result1"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "add"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 5,
              "raw": "5"
            },
            {
              "type": "Integer",
              "value": 7,
              "raw": "7"
            }
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "result2"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "mul"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 3,
              "raw": "3"
            },
            {
              "type": "Integer",
              "value": 4,
              "raw": "4"
            }
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "result3"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "sub"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 10,
              "raw": "10"
            },
            {
              "type": "Integer",
              "value": 2,
              "raw": "2"
            }
          ]
        }
      },
      {
        "type": "Comment",
        "content": "期待される変換結果 : "
      },
      {
        "type": "Comment",
        "content": "result1 : [ + ] 5 7"
      },
      {
        "type": "Comment",
        "content": "result2 : [ * ] 3 4"
      },
      {
        "type": "Comment",
        "content": "result3 : [ - ] 10 2"
      },
      {
        "type": "Comment",
        "content": "テストケース2 : 複合演算子と演算子チェーン"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "pow2"
        },
        "value": [
          "[",
          " ",
          {
            "type": "PartialApplication",
            "operator": "pow",
            "right": {
              "type": "Integer",
              "value": 2,
              "raw": "2"
            }
          },
          "",
          "]"
        ]
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "inc"
        },
        "value": [
          "[",
          " ",
          {
            "type": "PartialApplication",
            "operator": "add",
            "right": {
              "type": "Integer",
              "value": 1,
              "raw": "1"
            }
          },
          "",
          "]"
        ]
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "half"
        },
        "value": [
          "[",
          " ",
          {
            "type": "PartialApplication",
            "operator": "div",
            "right": {
              "type": "Integer",
              "value": 2,
              "raw": "2"
            }
          },
          "",
          "]"
        ]
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "square_and_add_ten"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Block",
            "bracket": "square",
            "expression": {
              "type": "Identifier",
              "name": "pow2"
            }
          },
          "arguments": [
            [
              "[",
              " ",
              {
                "type": "PartialApplication",
                "operator": "add",
                "right": {
                  "type": "Integer",
                  "value": 10,
                  "raw": "10"
                }
              },
              "",
              "]"
            ]
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "value1"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "inc"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 5,
              "raw": "5"
            }
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "value2"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "pow2"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 4,
              "raw": "4"
            }
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "value3"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "square_and_add_ten"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 3,
              "raw": "3"
            }
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "value4"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Block",
            "bracket": "square",
            "expression": {
              "type": "Identifier",
              "name": "inc"
            }
          },
          "arguments": [
            {
              "type": "Block",
              "bracket": "square",
              "expression": {
                "type": "Identifier",
                "name": "pow2"
              }
            },
            {
              "type": "Integer",
              "value": 4,
              "raw": "4"
            }
          ]
        }
      },
      {
        "type": "Comment",
        "content": "期待される変換結果 : "
      },
      {
        "type": "Comment",
        "content": "value1 : [ + 1] 5"
      },
      {
        "type": "Comment",
        "content": "value2 : [ ^ 2] 4"
      },
      {
        "type": "Comment",
        "content": "value3 : [[ ^ 2]] [ + 10] 3"
      },
      {
        "type": "Comment",
        "content": "value4 : [[ + 1]] [[ ^ 2]] 4"
      },
      {
        "type": "Comment",
        "content": "テストケース3 : 部分適用とUnit演算子の組み合わせ"
      },
      {
        "type": "Comment",
        "content": "※最小版ではラムダ式を含む定義はインライン展開しない"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "add_n"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": [
            "[",
            " ",
            {
              "type": "OperatorFunction",
              "operator": "add"
            },
            " ",
            "]"
          ],
          "arguments": [
            {
              "type": "Unit",
              "semantics": [
                "empty_list",
                "identity_morphism",
                "unit_element"
              ]
            }
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "mul_by"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          },
          "arguments": [
            [
              "[",
              " ",
              {
                "type": "OperatorFunction",
                "operator": "mul"
              },
              " ",
              "]"
            ]
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "between"
        },
        "value": {
          "type": "ChainedComparison",
          "operands": [
            {
              "type": "Unit",
              "semantics": [
                "empty_list",
                "identity_morphism",
                "unit_element"
              ]
            },
            {
              "type": "Unit",
              "semantics": [
                "empty_list",
                "identity_morphism",
                "unit_element"
              ]
            },
            {
              "type": "Unit",
              "semantics": [
                "empty_list",
                "identity_morphism",
                "unit_element"
              ]
            }
          ],
          "operators": [
            "less",
            "less"
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "add5"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "add_n"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 5,
              "raw": "5"
            }
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "triple"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "mul_by"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 3,
              "raw": "3"
            }
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "in_range"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "between"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 0,
              "raw": "0"
            },
            {
              "type": "Unit",
              "semantics": [
                "empty_list",
                "identity_morphism",
                "unit_element"
              ]
            },
            {
              "type": "Integer",
              "value": 100,
              "raw": "100"
            }
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "value5"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "add5"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 10,
              "raw": "10"
            }
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "value6"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "triple"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 7,
              "raw": "7"
            }
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "valid"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "in_range"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 42,
              "raw": "42"
            }
          ]
        }
      },
      {
        "type": "Comment",
        "content": "期待される変換結果 : "
      },
      {
        "type": "Comment",
        "content": "add5 : _0 ? [ + ] _0 5"
      },
      {
        "type": "Comment",
        "content": "triple : _0 ? _0 [ * ] 3"
      },
      {
        "type": "Comment",
        "content": "in_range : _0 ? 0 < _0 < 100"
      },
      {
        "type": "Comment",
        "content": "value5 : [_0 ? [ + ] _0 5] 10"
      },
      {
        "type": "Comment",
        "content": "value6 : [_0 ? _0 [ * ] 3] 7"
      },
      {
        "type": "Comment",
        "content": "valid : [_0 ? 0 < _0 < 100] 42"
      },
      {
        "type": "Comment",
        "content": "テストケース4 : 高階関数とリスト処理"
      },
      {
        "type": "Comment",
        "content": "map_1 : [ * 2 , ]"
      },
      {
        "type": "Comment",
        "content": "filter : [ > 5 , ]"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "reduce"
        },
        "value": [
          "[",
          " ",
          {
            "type": "OperatorFunction",
            "operator": "add"
          },
          " ",
          "]"
        ]
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "doubled"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "map_1"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 1,
              "raw": "1"
            },
            {
              "type": "Integer",
              "value": 2,
              "raw": "2"
            },
            {
              "type": "Integer",
              "value": 3,
              "raw": "3"
            },
            {
              "type": "Integer",
              "value": 4,
              "raw": "4"
            }
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "filtered"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "filter"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 3,
              "raw": "3"
            },
            {
              "type": "Integer",
              "value": 7,
              "raw": "7"
            },
            {
              "type": "Integer",
              "value": 2,
              "raw": "2"
            },
            {
              "type": "Integer",
              "value": 9,
              "raw": "9"
            }
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "sum"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "reduce"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 1,
              "raw": "1"
            },
            {
              "type": "Integer",
              "value": 2,
              "raw": "2"
            },
            {
              "type": "Integer",
              "value": 3,
              "raw": "3"
            },
            {
              "type": "Integer",
              "value": 4,
              "raw": "4"
            }
          ]
        }
      },
      {
        "type": "Comment",
        "content": "期待される変換結果 : "
      },
      {
        "type": "Comment",
        "content": "doubled : [ * 2 , ] 1 2 3 4"
      },
      {
        "type": "Comment",
        "content": "filtered : [ > 5 , ] 3 7 2 9 "
      },
      {
        "type": "Comment",
        "content": "sum : [ + ] 1 2 3 4"
      },
      {
        "type": "Comment",
        "content": "テストケース5 : 複雑な組み合わせ"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "average"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": [
            "[",
            " ",
            {
              "type": "OperatorFunction",
              "operator": "div"
            },
            " ",
            "]"
          ],
          "arguments": [
            [
              "[",
              " ",
              {
                "type": "OperatorFunction",
                "operator": "add"
              },
              " ",
              "]"
            ],
            {
              "type": "Unit",
              "semantics": [
                "empty_list",
                "identity_morphism",
                "unit_element"
              ]
            },
            {
              "type": "Block",
              "bracket": "paren",
              "expression": {
                "type": "FunctionApplyExpression",
                "function": {
                  "type": "Identifier",
                  "name": "length"
                },
                "arguments": [
                  {
                    "type": "Unit",
                    "semantics": [
                      "empty_list",
                      "identity_morphism",
                      "unit_element"
                    ]
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "type": "Comment",
        "content": "square_sum : [ + ] ([ ^ 2 , ] _)"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "apply_twice"
        },
        "value": {
          "type": "LambdaExpression",
          "parameters": [
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_0"
              },
              "continuous": false
            }
          ],
          "body": {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        }
      },
      {
        "type": "FunctionApplyExpression",
        "function": {
          "type": "Integer",
          "value": 0,
          "raw": "0"
        },
        "arguments": [
          {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        ]
      },
      {
        "type": "Integer",
        "value": 0,
        "raw": "0"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "avg_value"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "average"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 1,
              "raw": "1"
            },
            {
              "type": "Integer",
              "value": 2,
              "raw": "2"
            },
            {
              "type": "Integer",
              "value": 3,
              "raw": "3"
            },
            {
              "type": "Integer",
              "value": 4,
              "raw": "4"
            }
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "squares"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "square_sum"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 1,
              "raw": "1"
            },
            {
              "type": "Integer",
              "value": 2,
              "raw": "2"
            },
            {
              "type": "Integer",
              "value": 3,
              "raw": "3"
            }
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "twice_inc"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "apply_twice"
          },
          "arguments": [
            {
              "type": "Identifier",
              "name": "inc"
            }
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "value7"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "twice_inc"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 5,
              "raw": "5"
            }
          ]
        }
      },
      {
        "type": "Comment",
        "content": "期待される変換結果 : "
      },
      {
        "type": "Comment",
        "content": "avg_value : [ / ] [ + ] 1 2 3 4 (length 1 2 3 4)"
      },
      {
        "type": "Comment",
        "content": "squares : [ + ] ([ ^ 2 , ] 1 2 3)"
      },
      {
        "type": "Comment",
        "content": "twice_inc : _0 ? _0 _0"
      },
      {
        "type": "Comment",
        "content": "value7 : [_0 ? _0 _0] [ + 1] 5"
      },
      {
        "type": "Comment",
        "content": "テストケース6 : エッジケース"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "compose"
        },
        "value": {
          "type": "LambdaExpression",
          "parameters": [
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_0"
              },
              "continuous": false
            },
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_1"
              },
              "continuous": false
            }
          ],
          "body": {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        }
      },
      {
        "type": "FunctionApplyExpression",
        "function": {
          "type": "Integer",
          "value": 0,
          "raw": "0"
        },
        "arguments": [
          {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        ]
      },
      {
        "type": "FunctionApplyExpression",
        "function": {
          "type": "Integer",
          "value": 1,
          "raw": "1"
        },
        "arguments": [
          {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        ]
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "identity"
        },
        "value": {
          "type": "LambdaExpression",
          "parameters": [
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_0"
              },
              "continuous": false
            }
          ],
          "body": {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        }
      },
      {
        "type": "Integer",
        "value": 0,
        "raw": "0"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "nop"
        },
        "value": {
          "type": "Unit",
          "semantics": [
            "empty_list",
            "identity_morphism",
            "unit_element"
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "inc_then_double"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "compose"
          },
          "arguments": [
            {
              "type": "Identifier",
              "name": "mul"
            },
            {
              "type": "Identifier",
              "name": "inc"
            }
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "pass_through"
        },
        "value": {
          "type": "FunctionApplyExpression",
          "function": {
            "type": "Identifier",
            "name": "identity"
          },
          "arguments": [
            {
              "type": "Integer",
              "value": 42,
              "raw": "42"
            }
          ]
        }
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "empty"
        },
        "value": {
          "type": "Identifier",
          "name": "nop"
        }
      },
      {
        "type": "Comment",
        "content": "期待される変換結果 : "
      },
      {
        "type": "Comment",
        "content": "inc_then_double : [_0 _1 ? _0 _1 _] [ * ] [ + 1]"
      },
      {
        "type": "Comment",
        "content": "pass_through : [_0 ? _0] 42"
      },
      {
        "type": "Comment",
        "content": "empty : _"
      },
      {
        "type": "Comment",
        "content": " ######################################################################"
      },
      {
        "type": "Comment",
        "content": " 4. 比較演算の多項式の最適変換（初期段階では必要だが、最適化フェーズでは不要？）"
      },
      {
        "type": "Comment",
        "content": " 原式"
      },
      {
        "type": "Comment",
        "content": " 3 < _0 = y < 20 "
      },
      {
        "type": "Comment",
        "content": " 変換後"
      },
      {
        "type": "Comment",
        "content": " [[[3 < _0 & _0] = y & y] < 20] & y"
      },
      {
        "type": "Comment",
        "content": " 原式"
      },
      {
        "type": "Comment",
        "content": " 1 <= _0 <= 100"
      },
      {
        "type": "Comment",
        "content": " 変換後"
      },
      {
        "type": "Comment",
        "content": " [[1 <= _0 & _0] <= 100] & _0"
      },
      {
        "type": "Comment",
        "content": " ※変換しないほうが最適化しやすい見込み。実装しない"
      },
      {
        "type": "Comment",
        "content": " ######################################################################"
      },
      {
        "type": "Comment",
        "content": " 5. ブロック構文による条件分岐（match case対応）"
      },
      {
        "type": "Comment",
        "content": " ### 5.1 基本変換パターン"
      },
      {
        "type": "Comment",
        "content": " 原始構文（構文解析エラーのため一旦コメント）"
      },
      {
        "type": "Comment",
        "content": " func : _0 ? "
      },
      {
        "type": "Comment",
        "content": " \tcondition1 : result1"
      },
      {
        "type": "Comment",
        "content": " \tcondition2 : result2"
      },
      {
        "type": "Comment",
        "content": " \tcondition3 : result3"
      },
      {
        "type": "Comment",
        "content": " \tdefault_result"
      },
      {
        "type": "Comment",
        "content": " ### 5.3 変換例"
      },
      {
        "type": "Comment",
        "content": " #### 数値分類"
      },
      {
        "type": "Comment",
        "content": " 原始構文"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "classify"
        },
        "value": {
          "type": "LambdaExpression",
          "parameters": [
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_0"
              },
              "continuous": false
            }
          ],
          "body": {
            "type": "IndentBlock",
            "expression": {
              "type": "Unit",
              "semantics": [
                "empty_list",
                "identity_morphism",
                "unit_element"
              ]
            }
          }
        }
      },
      {
        "type": "BinaryOperation",
        "operator": "or",
        "left": {
          "type": "BinaryOperation",
          "operator": "and",
          "left": {
            "type": "ChainedComparison",
            "operands": [
              {
                "type": "Integer",
                "value": 0,
                "raw": "0"
              },
              {
                "type": "Integer",
                "value": 0,
                "raw": "0"
              }
            ],
            "operators": [
              "equal"
            ]
          },
          "right": {
            "type": "String",
            "value": "zero"
          }
        },
        "right": {
          "type": "IndentBlock",
          "expression": {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        }
      },
      {
        "type": "BinaryOperation",
        "operator": "or",
        "left": {
          "type": "BinaryOperation",
          "operator": "and",
          "left": {
            "type": "ChainedComparison",
            "operands": [
              {
                "type": "Integer",
                "value": 0,
                "raw": "0"
              },
              {
                "type": "Integer",
                "value": 0,
                "raw": "0"
              }
            ],
            "operators": [
              "more"
            ]
          },
          "right": {
            "type": "String",
            "value": "positive"
          }
        },
        "right": {
          "type": "IndentBlock",
          "expression": {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        }
      },
      {
        "type": "BinaryOperation",
        "operator": "and",
        "left": {
          "type": "ChainedComparison",
          "operands": [
            {
              "type": "Integer",
              "value": 0,
              "raw": "0"
            },
            {
              "type": "Integer",
              "value": 0,
              "raw": "0"
            }
          ],
          "operators": [
            "less"
          ]
        },
        "right": {
          "type": "String",
          "value": "negative"
        }
      },
      {
        "type": "Comment",
        "content": " #### 範囲チェック"
      },
      {
        "type": "Comment",
        "content": " 原始構文"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "grade"
        },
        "value": {
          "type": "LambdaExpression",
          "parameters": [
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_0"
              },
              "continuous": false
            }
          ],
          "body": {
            "type": "IndentBlock",
            "expression": {
              "type": "Unit",
              "semantics": [
                "empty_list",
                "identity_morphism",
                "unit_element"
              ]
            }
          }
        }
      },
      {
        "type": "BinaryOperation",
        "operator": "or",
        "left": {
          "type": "BinaryOperation",
          "operator": "and",
          "left": {
            "type": "ChainedComparison",
            "operands": [
              {
                "type": "Integer",
                "value": 0,
                "raw": "0"
              },
              {
                "type": "Integer",
                "value": 90,
                "raw": "90"
              }
            ],
            "operators": [
              "more_equal"
            ]
          },
          "right": {
            "type": "String",
            "value": "A"
          }
        },
        "right": {
          "type": "IndentBlock",
          "expression": {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        }
      },
      {
        "type": "BinaryOperation",
        "operator": "or",
        "left": {
          "type": "BinaryOperation",
          "operator": "and",
          "left": {
            "type": "ChainedComparison",
            "operands": [
              {
                "type": "Integer",
                "value": 0,
                "raw": "0"
              },
              {
                "type": "Integer",
                "value": 80,
                "raw": "80"
              }
            ],
            "operators": [
              "more_equal"
            ]
          },
          "right": {
            "type": "String",
            "value": "B"
          }
        },
        "right": {
          "type": "IndentBlock",
          "expression": {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        }
      },
      {
        "type": "BinaryOperation",
        "operator": "or",
        "left": {
          "type": "BinaryOperation",
          "operator": "and",
          "left": {
            "type": "ChainedComparison",
            "operands": [
              {
                "type": "Integer",
                "value": 0,
                "raw": "0"
              },
              {
                "type": "Integer",
                "value": 70,
                "raw": "70"
              }
            ],
            "operators": [
              "more_equal"
            ]
          },
          "right": {
            "type": "String",
            "value": "C"
          }
        },
        "right": {
          "type": "IndentBlock",
          "expression": {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        }
      },
      {
        "type": "BinaryOperation",
        "operator": "or",
        "left": {
          "type": "BinaryOperation",
          "operator": "and",
          "left": {
            "type": "ChainedComparison",
            "operands": [
              {
                "type": "Integer",
                "value": 0,
                "raw": "0"
              },
              {
                "type": "Integer",
                "value": 60,
                "raw": "60"
              }
            ],
            "operators": [
              "more_equal"
            ]
          },
          "right": {
            "type": "String",
            "value": "D"
          }
        },
        "right": {
          "type": "IndentBlock",
          "expression": {
            "type": "String",
            "value": "F"
          }
        }
      },
      {
        "type": "Comment",
        "content": " #### 複数引数での条件分岐"
      },
      {
        "type": "Comment",
        "content": " 原始構文"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "compare"
        },
        "value": {
          "type": "LambdaExpression",
          "parameters": [
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_0"
              },
              "continuous": false
            },
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_1"
              },
              "continuous": false
            }
          ],
          "body": {
            "type": "IndentBlock",
            "expression": {
              "type": "Unit",
              "semantics": [
                "empty_list",
                "identity_morphism",
                "unit_element"
              ]
            }
          }
        }
      },
      {
        "type": "ChainedComparison",
        "operands": [
          {
            "type": "Integer",
            "value": 0,
            "raw": "0"
          },
          {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        ],
        "operators": [
          "more"
        ]
      },
      {
        "type": "BinaryOperation",
        "operator": "or",
        "left": {
          "type": "BinaryOperation",
          "operator": "and",
          "left": {
            "type": "Integer",
            "value": 1,
            "raw": "1"
          },
          "right": {
            "type": "String",
            "value": "greater"
          }
        },
        "right": {
          "type": "IndentBlock",
          "expression": {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        }
      },
      {
        "type": "ChainedComparison",
        "operands": [
          {
            "type": "Integer",
            "value": 0,
            "raw": "0"
          },
          {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        ],
        "operators": [
          "equal"
        ]
      },
      {
        "type": "BinaryOperation",
        "operator": "or",
        "left": {
          "type": "BinaryOperation",
          "operator": "and",
          "left": {
            "type": "Integer",
            "value": 1,
            "raw": "1"
          },
          "right": {
            "type": "String",
            "value": "equal"
          }
        },
        "right": {
          "type": "IndentBlock",
          "expression": {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        }
      },
      {
        "type": "ChainedComparison",
        "operands": [
          {
            "type": "Integer",
            "value": 0,
            "raw": "0"
          },
          {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        ],
        "operators": [
          "less"
        ]
      },
      {
        "type": "BinaryOperation",
        "operator": "and",
        "left": {
          "type": "Integer",
          "value": 1,
          "raw": "1"
        },
        "right": {
          "type": "String",
          "value": "less"
        }
      },
      {
        "type": "Comment",
        "content": " #### 複雑な条件"
      },
      {
        "type": "Comment",
        "content": " 原始構文"
      },
      {
        "type": "Definition",
        "identifier": {
          "type": "Identifier",
          "name": "access_check"
        },
        "value": {
          "type": "LambdaExpression",
          "parameters": [
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_0"
              },
              "continuous": false
            },
            {
              "type": "Parameter",
              "name": {
                "type": "Identifier",
                "name": "_1"
              },
              "continuous": false
            }
          ],
          "body": {
            "type": "IndentBlock",
            "expression": {
              "type": "Unit",
              "semantics": [
                "empty_list",
                "identity_morphism",
                "unit_element"
              ]
            }
          }
        }
      },
      {
        "type": "BinaryOperation",
        "operator": "or",
        "left": {
          "type": "BinaryOperation",
          "operator": "and",
          "left": {
            "type": "ChainedComparison",
            "operands": [
              {
                "type": "Integer",
                "value": 0,
                "raw": "0"
              },
              {
                "type": "String",
                "value": "admin"
              }
            ],
            "operators": [
              "equal"
            ]
          },
          "right": {
            "type": "String",
            "value": "full_access"
          }
        },
        "right": {
          "type": "IndentBlock",
          "expression": {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        }
      },
      {
        "type": "BinaryOperation",
        "operator": "and",
        "left": {
          "type": "ChainedComparison",
          "operands": [
            {
              "type": "Integer",
              "value": 1,
              "raw": "1"
            },
            {
              "type": "String",
              "value": "moderator"
            }
          ],
          "operators": [
            "equal"
          ]
        },
        "right": {
          "type": "Unit",
          "semantics": [
            "empty_list",
            "identity_morphism",
            "unit_element"
          ]
        }
      },
      {
        "type": "BinaryOperation",
        "operator": "or",
        "left": {
          "type": "BinaryOperation",
          "operator": "and",
          "left": {
            "type": "ChainedComparison",
            "operands": [
              {
                "type": "Integer",
                "value": 0,
                "raw": "0"
              },
              {
                "type": "String",
                "value": "guest"
              }
            ],
            "operators": [
              "not_equal"
            ]
          },
          "right": {
            "type": "String",
            "value": "moderate_access"
          }
        },
        "right": {
          "type": "IndentBlock",
          "expression": {
            "type": "Unit",
            "semantics": [
              "empty_list",
              "identity_morphism",
              "unit_element"
            ]
          }
        }
      },
      {
        "type": "BinaryOperation",
        "operator": "or",
        "left": {
          "type": "BinaryOperation",
          "operator": "and",
          "left": {
            "type": "ChainedComparison",
            "operands": [
              {
                "type": "Integer",
                "value": 0,
                "raw": "0"
              },
              {
                "type": "Unit",
                "semantics": [
                  "empty_list",
                  "identity_morphism",
                  "unit_element"
                ]
              }
            ],
            "operators": [
              "not_equal"
            ]
          },
          "right": {
            "type": "String",
            "value": "basic_access"
          }
        },
        "right": {
          "type": "IndentBlock",
          "expression": {
            "type": "String",
            "value": "no_access"
          }
        }
      }
    ]
  },
  "error": null
}