
` ###############################################
` # Phase 1
` ###############################################

divide_test : _0 _1 ? _0 / _1
multi_op : _0 _1 _2 ? ( _0 + _1 ) - ( _0 * _2 )

` ###############################################
` # Phase 2 - 1
` ###############################################

` Unit値基本処理テスト

` テスト1 : Unit値を返すだけの定数（引数無しラムダはNG）
return_unit : _

` テスト2 : identity関数（引数をそのまま返す）
identity_unit : _0 ? _0

` テスト4 : 数値とUnit値の混在
mixed_test : _0 _1 ? _0


` 実際の使用例（後でテスト可能）

` Unit値が返される
test1 : return_unit

` 42が返される 
test2 : identity_unit 42

` Unit値が返される
test3 : identity_unit _

` 10が返される
test5 : mixed_test 10 _

` Unit値が返される
test6 : mixed_test _ 20

` ###############################################
` # Phase 2 - 2
` ###############################################

` 文字列実装後の比較テストケース
grade : _0 ? 
	_0 >= 90 & `A` | 
	80 <= _0 & `B` | 
	_0 >= 70 & `C` | 
	`F`
status : _0 ? 
	_0 = `admin` & `full_access` | 
	_0 = `user` & `basic_access` | 
	`no_access`
` ###############################################
` # Phase 2 - 2 - 1
` ###############################################

` 標準出力用先行実装
show_message : _0 ? 
	0x1 # _0
show_message `hello`

0x1 # ` wold!\n`

