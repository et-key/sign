` AST設計用Sign言語サンプルコード
` リファレンス準拠の特徴的構文を中心に構成

` ==================================================================
` 1. 基本的な定義と算術演算（ARM64最適化の基本）
` ==================================================================

` 定数定義（.data セクション配置）
x : 10
y : 20
pi : 3.14159

` 基本算術演算（レジスタ内演算）
sum : x + y
diff : x - y
product : x * y
quotient : x / y
remainder : x % y
power : x ^ 2

` ==================================================================
` 2. 型リテラルとハードウェアマッピング（重要な特徴）
` ==================================================================

` アドレス型（メモリ操作用）
buffer_addr : 0x8000
io_port : 0x4000

` レジスタ直接操作型（ビット演算用）
mask : 0b11110000
flags : 0b00001111

` メインフレーム互換型
perms : 0o755

` FPU/SIMD最適委譲型
float_val : 123.456

` ==================================================================
` 3. Unit概念とその演算（ARM64条件付き命令での最適化）
` ==================================================================

` Unit を含む論理演算（短絡評価）
` 結果: _ （Unitが左辺）
test1 : _ & x
` 結果: _ （Unitが右辺）
test2 : x & _
` 結果: x （Unitが左辺）
test3 : _ | x
 ` 結果: x （左辺がtrue時の短絡）
test4 : x | _

` Unit を含む算術演算（部分適用ラムダ生成）
add_something : _ + 5
mul_by_x : x * _

` ==================================================================
` 4. 比較演算の多項式（特殊なAST構造が必要）
` ==================================================================

` 基本的な比較多項式
range_check : 0 <= x <= 100
three_way : 3 < x = y < 20

` 複雑な比較チェーン
bounds : 1 < x < 10 & 5 < y < 15
equality_chain : a = b = c = 42

` ==================================================================
` 5. ラムダ式と関数定義（関数型の中核）
` ==================================================================

` 基本的なラムダ
add : x y ? x + y
multiply : x y ? x * y

` 単一引数ラムダ
square : x ? x * x
negate : x ? -x

` 残余引数を含むラムダ
sum_all : x ~rest ? x + sum_all rest~
first_and_rest : head ~tail ? head, tail

` ==================================================================
` 6. 部分適用とUnit演算（重要な最適化ポイント）
` ==================================================================

` 基本的な部分適用
add5 : add 5 _
mul_by_2 : multiply _ 2

` Unit位置による引数順序変換
flip_add : add _ 10
reverse_sub : _ - x

` ==================================================================
` 7. ポイントフリー記法（最適化とSIMD化の鍵）
` ==================================================================

` 基本演算子の関数化
add_fn : [+]
mul_fn : [*]
sub_fn : [-]

` 部分適用された演算子
double : [* 2]
increment : [+ 1]
halve : [/ 2]

` リスト操作用演算子
map_double : [* 2,]
sum_reduce : [+]

` ==================================================================
` 8. リスト操作と構造（SIMD最適化の対象）
` ==================================================================

` リスト定義（空白区切りと積演算子）
list1 : 1 2 3 4 5
list2 : 1, 2, 3, 4, 5

` リスト操作の適用
doubled : map_double list1
total : sum_reduce list2

` 範囲リスト
range1 : 1 ~ 10
range2 : \a ~ \z

` ==================================================================
` 9. 条件分岐（match_case形式のラムダ）
` ==================================================================

` 基本的な条件分岐
abs : x ?
	x >= 0 : x
	x < 0 : -x

` 複数条件の分岐
sign : x ?
	x > 0 : 1
	x = 0 : 0
	x < 0 : -1

` Unit を返すケース
validate : x ?
	x >= 0 & x <= 100 : x
	_

` ==================================================================
` 10. メモリ操作とポインタ（低レベル操作）
` ==================================================================

` ポインタの基本操作
ptr : $buffer_addr
value : @ptr
ptr # 42

` ダブルポインタ
ptr_to_ptr : $ptr
indirect_value : @@ptr_to_ptr

` ==================================================================
` 11. IO操作（入出力の抽象化）
` ==================================================================

` 入力操作
input_data : @io_port
keyboard : @0x60

` 出力操作
io_port # result
0x80 # status

` ==================================================================
` 12. 関数合成とチェーン（高階関数）
` ==================================================================

` 関数合成
inc_then_double : [+ 1] [* 2]
square_then_inc : [^ 2] [+ 1]

` 複雑な関数チェーン
process : [+ 1] [* 2] [^ 2] [/ 3]

` 適用例
result1 : inc_then_double 5
result2 : process 4

` ==================================================================
` 13. エクスポートとスコープ（メモリ管理との連携）
` ==================================================================

` エクスポート定義（プロジェクト全体で共有）
#global_state : 0
#api_version : `1.0.0`

` ローカル定義（ファイルスコープ）
local_temp : 273.15
local_buffer : 0x2000

` ==================================================================
` 14. 複合的な例（実際のプログラム例）
` ==================================================================

` 配列の平均値計算
average : arr ?
	sum : [+] arr
	count : length arr
	sum / count

` フィボナッチ数列
fib : n ?
	n <= 1 : n
	fib (n - 1) + fib (n - 2)

` リスト処理の組み合わせ
process_numbers : nums ?
	filtered : [> 0,] nums
	doubled : [* 2,] filtered
	[+] doubled

` 使用例
test_list : 1 -2 3 -4 5
result : process_numbers test_list