`Simple Lambda
[[x] [x 2 * ] ?]

`argument list
[[x y] [[x y +] 2 ^] ?]

`spread
[[x [y ~]] [y _~] ?]

`match_case 頭のスペースやおしりの改行は便宜上なのでトークンに別れてるのが大切。
[[x] [
 [[x 0 >] [x] &]
 [[x 0 >] [-1 x *] &]
 [[x 0 =] [[y]
  [
   [[y _ !=] [y] &]
   `What do you want to do?`
  |] ?] &
 ]
 _ |
] ?]

`KeyMap
[a [ [_0] [
 [[_0 `a1` =] [0] &]
 [[_0 `b1` =] [[_1] [
  [[_1 `a2` =] [2] &]
  _
 |] ?] &]
 [[_0 `c1` =] [3] &]
 _
|] ?] :]

`つまり、expression : [operator expression expression]
`というexpressionの再起的適用で中間表現を生成できる。
`ただし、後置演算子だけは前置演算に直すために、演算子の前に_を追加することでポイントフリー化出来ることを利用する。
`これを元にASTを作るのも良いと思う。
