`Strings are enclosed in backQuotes`
`Lines with only literals at the start or middle are not executed. Therefore, the line above is not executed.`
`Even if a line contains only literals, if it's the final line of a function, it becomes the return value.`
`Therefore, comments are written as strings.`

`A newline is a postfix operator meaning "evaluate".`
`If you don't want a newline to represent evaluation, use a newline character.`
`Indentation at the beginning of a line forms a block.`

`The normal evaluation strategy of this language is lazy evaluation.`

`":" in English means "namely", so it's used as the assignment operator, while = is strictly a comparison operator.`
`Just by looking below, it should be obvious that in this language, names become types.`

x: -353.15134
y: 4001.35364502

Hello: `Hello`
World: `World`

`true is all valid values, false is 0 or a list of length 0`

yep: 1
nop: 0

`An assignment operator not in a block is right-unitary.`

unit: none: []

`The above is equivalent to the following syntax`

none: []
unit: []

`In this language, both parentheses and indentation represent blocks, have local scope, and are recognized as being processed with priority.`
`In other words, the scope of names is determined by blocks`
`To avoid errors, the following is commented out`
`	y: 1`
`	n: 0`

`The above is deleted when exiting the block, so it returns none (unit) along with a "y wasn't defined" error.`

`[y = 1] = 0`

`However, if written as follows, it can be accessed.`

[
	`y`: 1
	`n`: 0
] `y`

`How to define lambda terms`
`The basics of lambda terms use ?.`
`Functions without assignment need to be enclosed in parentheses. This is because the start of parentheses means the creation of a stack.`

[x y ? x ^ 2 + 2 * x * y + y ^ 2]

`The above is equivalent to the following expression by factorization.`
`By reinterpreting parentheses as the definition start of a block (stack), the priority of expressions can be expressed.`

[x y ? (x + y) ^ 2]

`Using point-free style and function composition, we can further simplify the description`
`Point-free function descriptions are direct operator descriptions, so the type is self-evident.`
`Once it becomes a function, the priority as an operator is lost, and function composition becomes left-unitary.`

[+] [^ 2]

`If you want to write [^2] with priority in point-free notation...`

[^ 2] [+]

`is the result.`

`There are shorthands for comparison operations.`

`[[x = y & y] = z]`

x = y = z

`[[1 <= x & x] <= 9]`

1 <= x <= 9

`If you don't want function application or composition, you can handle it by putting a comma immediately after the function to make it a direct product.`

[+ 2] 2 = 4
[+ 2], 2 = [+ 2], 2

`Lambda terms can also describe constant assignments and constant functions`

iterate3 : 1 ? 2 ? 3

`It is evaluated when there is a space at the end.`

iterate3 = 1
iterate3 = 2
iterate3 = 3
iterate3 = []
iterate3 = []

`Point-free notation of unary expressions takes arguments in the order of right, then left.`
`The last argument of a function can be written before the function.`
`If it's after :, [] can be omitted if the point-free notation is a unary expression.`

result2 : - 1 3
add : +
exp : ^
id : x ? x

`The priority of function evaluation is lower than lambda definition.`
`Function composition is left-unitary, but if you write normal function execution, it can be written as right-unitary.`
`There is no difference by type of parentheses in this language.`

`The following functions as a function that returns the head.`

[x ? x] 1 2 3 = 1
[x ? x] 1, 2, 3 = 1

[1 2 3] '0 = 1
[1, 2, 3] '0 = 1

`The following functions as a function that returns the tail.`

[_ ~y ? y~] 1 2 3 = 2 3
[_ ~y ? y~] 1, 2, 3 = 2 3

[1 2 3] '1~ = 2 3
[1, 2, 3] '1~ = 2 3

`In this language, for those who really want to write types, you can enclose names in " for type annotation or type reading (not recommended)`
`Why the type becomes automatically correct if the syntax is correct is self-evident in the following type annotation`
`Because the type to which a function is applied is expressed as is, it becomes the same as the implementation.`
`Of course, the type after a function is executed is automatically type-cast to the type after execution,`
`This is related to the fact that type calculation is done later because it's lazy evaluation.`
`As a result, the compiler or interpreter doesn't need to guarantee type safety.`
`Arguments passed to higher-order functions need to be written separately whether to evaluate or not by direct product.`

`match_case can be written using block syntax as follows.`
`The block becomes guard notation.`
`Blocked assignment operations are also this in nature`
`If you assign the block itself or enclose it in parentheses for immediate generation, it's just like a normal function.`
`When using lambda anonymously, it must be enclosed in parentheses.`

[x ?
	x = 0 : 0
	x > 0 : `more`
	x < 0 : `less`
	`other_wise`
] 3

`The above is replaced by the following in preprocessing.`

[
	x ? 
		x = 0 & [_ ? 0] ;
		x > 0 & [_ ? `more`] ;
		x < 0 & [_ ? `less`] ;
		[_ ? `other_wise`]
] 3

`Constructor-like description.`
`It's also possible to assign dynamic key names, and in that case, ~ is used to forcibly extract values assigned to variables or arguments.`

Person : name age etc x ?
	name
	age
	~etc : x

john : Person `john` 18 `Like` `Sushi`

john `name`

`Quote uses the following ident as a string as is.`

john 'name = john `name`

`Create a copy of the person instance using the spread operator and overwrite values`

person : Person [] [] [] []

mary : 
	~person
		'name : `mary`
		'age  : 16

charie : 
	~person
		'name : `charie`
		'age  : 24

`From here on, we'll use the shorthand notation.`

[
	0   : `zero`
	> 0 : `more`
	< 0 : `less`
	`other`
] 3

`Behavior like a ternary operator can also be defined as follows.`

[
	1 : `yep`
	0 : `nop`
] 1

`This is also equivalent to match_case, and with this notation, if then can be reproduced`
`If there's no otherwise description and it matches otherwise, it returns the passed value as is.`

[> 3 : [+ 3]] 3 4 = 4

`Data class-like descriptions are also shorthand for match_case.`

Item :
	name
	equip
	use
	effect

medicalWeed :
	Item
		`medicalWeed`
		[]
		['medicalWeed], [- 1]
		['HP], [+ 20]

lightningStaff :
	Item
		`lightningStaff`
		['Atk], [+ 8]
		['ThunderBolt]
		['HP], [- 40]

`The so-called let ~ in is written as follows.`
`It actually becomes the same as a monadic description.`

myValue :
	3
	[+ 4]
	[* 2]

`List definitions are basically comma-separated.`
`"," in English represents "strong separation" and "direct product".`
`" " is used for "direct sum".`
`For scalar types of coproduct, commas can be omitted.`
`It's also clear that lambda evaluation has lower priority than other expressions or terms.`
`The way lists function as iterators is well understood by looking at the form where the head function is not omitted.`
`It beautifully reproduces the fact that implementation is type.`
`Similarly, it also shows that "," and " " are adjoint by the adjoint functor theorem.`
`This coincides with the definition of a function that takes arguments as constants, but the constant function of arguments is treated as an iterator.`
`By attaching the ~ operator to an iterator, it is iterated`

myPairs: 1 2 3 4 5
myPairs0: [,] 1 2 3 4 5
myPairs1: 1, 2, 3, 4, 5
myPairs2: 1 ? 2 ? 3 ? 4 ? 5

myPairs0 = myPairs = myPairs1 = [,] myPairs2~

`Therefore, higher-order descriptions can be done naturally, which is conceptually just replacing commas with some function and folding.`
`Therefore, folding (foldL) is just passing a list to a two-argument function, which coincides with LISP.`
`For beginners of this language or those who prioritize implementation, we are considering providing a library to make this description easier to understand with ordinary words.`

[[,],] myPairs = [1], [2], [3], [4], [5]
[?] myPairs = 1 ? 2 ? 3 ? 4 ? 5
[+] myPairs = 15

`map is possible with this kind of description, but`

[* 2,] myPairs = 2 4 6 8 10

`This is direct sum (array composition)`

r: [1 2] [3 4]

`This is direct product (2D array)`

s: [1 2],[3 4]

`Expressions that look like dictionary types are the same as anonymous functions that perform match_case, and the type of parentheses doesn't matter, and can be defined with indentation.`
`However, opening and closing parentheses must always be paired.`

myGreet:
	greet: 
		hello: `hello,`
		welcome: `welcome,`
	world: ` world`

`The above myGreet is replaced by the following in preprocessing.`

myGreet: ~a ?
	a '0 = `greet` & 
		a '1 = `hello` & `hello,` ;
		a '1 = `welcome` & `welcome,` ;
	a '0 = `world` & ` world`;
	[]

`Therefore, access will be by ident or string, or natural or hex as arguments.`

myGreet 'greet 'hello = `hello,`

myPairs '0 = 1

myPairs '[1 ~ 3] = 2 3 4

`By using block scope, you can directly write get within the block scope.`
`Of course, this block syntax also has a return value at the end of the operation.`
`This returns a direct sum if a direct sum of results is possible in the block scope.`

myGreet
	'greet
		'welcome
	'world
= `welcome, world`

`Value modification is possible`

myGreet
	'greet
		'welcome : `welcome to our `
	'world : `metaverse!`

`By inferring only primitive types, it is designed to solve actual type problems.`
`All given names are definitions, and they are self-evident types, so names are types.`

`The ~ operator can expand only match_case that mimics dictionary types on the target scope.`
`If it's a prefix, it takes priority over other terms, and if it's a postfix, other terms take priority.`

~[
	y: 1
	n: 0
]

y = 1

`@ prefix operator is import. It can be specified from file names, and path specification is also possible`
`Since match_case can be considered as a dictionary type, it can be expanded to one level up scope with the ~ operator, so import that can be used in the file is possible with ~@.`

@io
	say Hello World

`Since it's not an import on the file scope, the line below returns a Say is not defined error.`

say Hello World

`Expand and use in file scope.`

@Funnctor~
@Monoid~
@io~

say [ [* 4,] [+] [1 ~ 5] ]

`Any single character after \ is always one character value of character type.`
`In the case of character concatenation, since it's decided that \ is followed by one character, if ident or string comes, it's simply regarded as string concatenation.`
`Scalar value listing usually uses space or comma, but in the case of character literals and string literals,`
`There are cases where concatenation can be expressed by direct description, so describe that pattern.`
`A string is just a list of characters.`
`However, practical character value notation, insertion of newlines, and`

M: \M

My: M \y\ \D\o\m\e\s\t\i\c
My = M \y \  \D \o \m \e \s \t \i \c = `My Domestic`

	`Hello ` `World!` = `Hello World!`
	`Hello` \ `World!` = `Hello World!`
	\H `ello` \ `World` \! = `Hello World!`
	`Hello ` My `World!` = `Hello My Domestic World!`
	Hello \ My \ `World` \! = `Hello My Domestic World!`
	`Hello` \!\ My World \! = `Hello! My Domestic World!`

`Strings containing \ backslash can be defined. Be careful as it's not an escape sequence`

`String definition containing back_quort treats back_quort as a character and handles it with string concatenation (coproduct)`

`Sign\s ` \` `define a string literal`

`If you want to express a string containing a newline, it becomes a block-like writing.`
`The reason is that " " means "list concatenation, and function composition, function application".`
`If you want to include a newline.`

HWinEnter :
 `Hello` \
 `World!`

`"#" becomes an export prefix operator.`
`Normal functions always return the value of the last line, and match_case returns the value or function corresponding to the specified value`
`The entire file is also a function, but anything other than export, that is, shown by #, does not leave its own scope.`

#myDict : name value ? ~name : value
#gets : name ? myDict '~name

`Logical operators are short-circuit evaluated.`

0 & `me` = 0
1 & `me` = `me`

0 | `me` = `me`
1 | `me` = 1

0 ; `me` = `me`
1 ; `me` = 0

`The following line is for compiler debugging`
#`It:`\	`365` `is number of date at 1 year`
\	4 + 5
