`String is backQuote`
`Lines that start or are in the middle with only meaningless literals are not executed. Therefore, the line above is not executed.`
`Even if it's a line with only literals, if it's the final line of a function, it becomes the return value.`
`Therefore, comments are written as strings.`

`A line break is a postfix operator meaning "evaluate".`
`If you don't want a line break to represent evaluation, use a line break character.`
`Leading indentation forms a block.`

`The normal evaluation strategy of this language is lazy evaluation.`

`":" in English means "namely", so it's used as the assignment operator, while = is strictly a comparison operator.`
`Just by looking below, it should be obvious that in this language, names become types.`

x: 3
y: 4

Hello: `Hello`
World: `World`

`true is all valid values, false is 0 or a list of length 0`

yep: 1
nop: 0

`An assignment operator that is not in a block is a right identity and is syntactic sugar for distributive syntax.`

unit: none: []

`The above has the same meaning as the following syntax`

none: []
unit: []

`In this language, both parentheses and indentation represent blocks, have local scope, and are recognized as being processed with priority.`
`In other words, the scope of names is determined by blocks`

  y: 1
  n: 0

`The above is deleted when leaving the block, so it returns none(unit) along with a "y wasn't defined" error.`

[y = 1] = 0

`However, it can be accessed as follows.`

[
  `y`: 1
  `n`: 0
] `y`

`How to define lambda terms`
`The basic of lambda terms is to use ?.`
`Functions without assignment need to be enclosed in parentheses. This is because the beginning of parentheses means the creation of a stack.`

[x y ? x ^ 2 + 2 * x * y + y ^ 2]

`By factoring, this expression is equivalent to the following.`
`By reinterpreting parentheses as the definition start of a block (stack), it can express the priority of expressions.`

[x y ? (x + y) ^ 2]

`In some cases, the description can be further simplified using point-free and function composition`
`The description of point-free functions is a direct description of operators, so the type is self-evident.`
`The position of parentheses for the priority of function composition remains unchanged.`

[+] [^ 2]

`If you want to write a notation that prioritizes [^2] in point-free...`

[^ 2] [+]

`it becomes like this.`

`There are shorthands for comparison operations.`

`[x = y] & [y = z]`

x = y = z

`[1 <= x] & [x <= 9]`

1 <= x <= 9


`If you don't want function application or composition, you can deal with it by putting a comma immediately after the function to make it a direct product.`

[+ 2] 2 = 4
[+ 2], 2 = [+ 2], 2


`Lambda terms can also describe constant assignments and constant functions`

iterate3 : 1 ? 2 ? 3


`It is evaluated because there is a space at the end.`

iterate3 = 1
iterate3 = 2
iterate3 = 3
iterate3 = []
iterate3 = []


`Point-free descriptions of unary expressions take arguments in the order of right, then left.`
`The first argument of a function can be written before the function`
`If it's after :, [] can be omitted if the point-free description is a unary expression.`

result2 : - 1 3
add : +
exp : ^
id : x ? x


`Since the priority of function evaluation is lower than lambda definition, parentheses cannot be omitted for processing such expressions.`



`The following functions as a function that returns the head.`

[x ? x] 1 2 3 = 1
[x ? x] 1, 2, 3 = 1

[1 2 3] '0 = 1
[1, 2, 3] '0 = 1

`The following functions as a function that returns the tail.`

[_ ~y ? y~] 1 2 3 = 2 3
[_ ~y ? y~] 1, 2, 3 = 2 3

[1 2 3] '1~ = 2 3
[1, 2, 3] '1~ = 2 3


`In this language, for those who really want to write types, you can do type annotation or type reading by enclosing names with " (not recommended)`
`Why the type automatically becomes correct if the syntax is correct is self-evident from the following type annotation`
`Because the type to which a function is applied is expressed as the type to which the function is applied, it becomes the same as the implementation.`
`Of course, the type of a function that has been executed will be automatically type-cast to the type after execution,`
`This is related to the fact that type calculation is done later because it is lazy evaluation.`
`As a result, the compiler or interpreter doesn't need to guarantee type safety.`
`Arguments passed to higher-order functions need to be written separately by direct product to evaluate or not.`

`match_case can be described using block syntax as follows.`
`The block becomes guard notation.`
`This is the true identity of block-assigned operations`
`If you assign the block itself or enclose it in parentheses for immediate generation, it's just like a regular function.`
`When using lambda anonymously, it must be enclosed in parentheses.`

[x ?
	x = 0 : 0
	x > 0 : `more`
	x < 0 : `less`
	`other_wise`
] 3

`The above is preprocessed and replaced with the following.`

[
	x ? 
		x = 0 & [_ ? 0] ;
		x > 0 & [_ ? `more`] ;
		x < 0 & [_ ? `less`] ;
		[_ ? `other_wise`]
] 3


`Constructor-like description.`
`It's also possible to assign dynamic key names, in which case ~ is used to forcibly extract values assigned to variables or arguments.`


Person : name age etc x ?
  name
  age
  ~etc : x

john : Person `john` 18 `Like` `Sushi`

john `name`

`Quote uses the subsequent ident as a string as it is.`

john 'name = john `name`


`Create a copy of the person instance using the spread operator and overwrite values`

person : Person [] [] [] []


mary : 
  ~person
    'name : `mary`
    'age  : 16


charie : 
  ~person
    'name : `charie`
    'age  : 24

`From here on, we'll use the shorthand notation.`

[
  0   : `zero`
  > 0 : `more`
  < 0 : `less`
  `other`
] 3

`Behavior like a ternary operator can also be defined as follows.`

[
  1 : `yep`
  0 : `nop`
] 1


`This is also equivalent to match_case, and with this description, if then can be reproduced`
`If there is no otherwise description and it matches otherwise, it returns the passed value as is.`

[> 3 : [+ 3]] 3 4 = 4

`Data class-like descriptions are also shorthand for match_case.`

Item : 
  name
  equip
  use
  effect

medicalWeed :
	Item
		`medicalWeed`
		[]
		['medicalWeed], [- 1]
		['HP], [+ 20]

lightningStaff :
	Item
		`lightningStaff`
		['Atk], [+ 8]
		['ThunderBolt]
		['HP], [- 40]


`In fact, it becomes the same as a monadic description.`

myValue :
 3
  [+ 4]
  [* 2]


`List definitions are basically comma-separated.`
`"," in English represents "strong separation" and "direct product".`
`" " is used for "direct sum".`
`Comma can be omitted in case of coproduct of scalar types.`
`You can also see that the evaluation of lambda has lower priority than other expressions or terms.`
`You can also see how lists function as iterators by looking at the form where the head function is not omitted.`
`It beautifully reproduces the fact that implementation is type.`
`Similarly, it also shows that "," and " " are adjoint by the adjoint functor theorem.`

myPairs: 1 2 3 4 5
myPairs0: [,] 1 2 3 4 5
myPairs1: 1, 2, 3, 4, 5
myPairs2: 1 ? 2 ? 3 ? 4 ? 5

myPairs0 = myPairs = myPairs1 =  [,] myPairs2~

[[,],] myPairs = [1], [2], [3], [4], [5]
[?] myPairs = 1 ? 2 ? 3 ? 4 ? 5
[+] myPairs = 15

`This is a mapping`

[* 2,] myPairs = 2 4 6 8 10


`This is a direct sum (array composition)`

r: [1 2] [3 4]


`This is a direct product (2D array)`

s: [1 2],[3 4]


`Expressions that look like dictionary types are the same as anonymous functions that perform match_case, and the type of parentheses doesn't matter, and can be defined with indentation.`
`However, opening and closing parentheses must always be in pairs.`

myGreet:
	greet: 
	  hello: `hello,`
	  welcome: `welcome,`
  world: ` world`

`The above myGreet is replaced with the following in preprocessing.`

myGreet: ~x ?
	x '0 = `greet` & 
		x '1 = `hello` & `hello,` ;
		x '1 = `welcome` & `welcome,` ;
	x '0 = `world` & ` world`;
	[]

`Therefore, access will be by ident or string, or natural or hex as an argument.`

myGreet 'greet 'hello = `hello,`

myPairs '0 = 1

myPairs '[1 ~ 3] = 2 3 4


`By using block scope, you can write get directly in the block scope.`
`This block syntax, of course, has a return value at the end of the operation.`
`This returns a direct sum if a direct sum of results is possible in the block scope.`

myGreet
  'greet
    'welcome
  'world
= `welcome, world`


`Value modification is possible`

myGreet
  'greet
    'welcome : `welcome to our `
  'world : `metaverse!`


`By inferring only primitive types, it is designed to solve actual type problems.`
`All given names are definitions, and because they are also self-evident types, names are types.`


`The ~ operator can expand only match_case that mimics dictionary types on the target scope.`
`If it's prefix, it takes priority over other terms, if it's postfix, other terms take priority.`

~[
  y: 1
  n: 0
]

y = 1


`The @ prefix operator is import. It can also be specified from file names, and path specification is possible`
`If match_case can be considered as a dictionary type, it can be expanded to one level up scope with the ~ operator, so imports that can be used in the file are possible with ~@.`

@io
  say Hello World


`Expand and use in file scope.`

@io~

say[1 2 3 4 5 [* 4,] [+]]


`Any single character after \ is always one character of character type value.`
`In the case of character concatenation, since it is decided that one character comes after \, if an ident or string comes, it is simply regarded as string concatenation.`
`Scalar value list creation usually uses space or comma, but in the case of character literals and string literals,`
`There are cases where concatenation can be represented by a direct description, so describe that pattern.`
`A string is just a list of characters.`

M: \M

My: M \y\ \D\o\m\e\s\t\i\c
My = M \y \  \D \o \m \e \s \t \i \c = `My Domestic`

`Hello ` `World!` = `Hello World!`
`Hello` \ `World!` = `Hello World!`
\H `ello` \ `World` \! = `Hello World!`
`Hello ` My `World!` = `Hello My Domestic World!`
Hello \ My \ `World` \! = `Hello My Domestic World!`
`Hello` \!\ My World \! = `Hello! My Domestic World!`

`If you want to express a string containing line breaks, it becomes a block-like writing.`
`The reason is that " " means "list concatenation, function composition, and function application".`
`If you want to include line breaks.`

HWinEnter :
 `Hello` \
 `World!`

`"#" becomes export.`
`Normal functions always return the value of the final line, and match_case returns the value or function corresponding to the specified value`
`While the entire file is also a function, anything not indicated by export, i.e., #, does not leave its own scope.`

# myDict : name value; ~name : value
# gets : ?

`Logical operators are short-circuit evaluated.`

0 & `me` = 0
1 & `me` = `me`

0 | `me` = `me`
1 | `me` = 1

0 ; `me` = `me`
1 ; `me` = 0

