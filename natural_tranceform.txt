`,` と ` ` は随伴
`~a` と `a~` は随伴
`,` と `?` は随伴
` `はスタックにプッシュするだけ
`,`は、スタックを作って入れる


[1 2 3] = [1,2,3]~
~[1 2 3] = [1,2,3]

[1 2 3 , 4 5 6] = [1 2 3] , [4 5 6] = 1 2 3 , 4 5 6
1,2,3 4,5,6 = [1] [2] [3 4] [5] [6] = 1 2 3 4 5 6

[1,2,3 4,5,6] = [[1] , [2] , [3 4] , [5] , [6]] = [1] [2] [3 4] [5] [6] = 1 2 3 4 5 6

a : 1 2 3
b : 4 5 6

a b = 1 2 3 4 5 6
a,b = 1 2 3 , 4 5 6

[1,2,3] = [[1] [2] [3]] = [1 2 3]


`つまりブロックを解除すると…
1,2,3 = 1 2 3

1 2 3 , 4 5 6 = [1 2 3] , [4 5 6] 
1 , 2 3 4 5 , 6 = [1] , [2 3 4 5] , [6]


f 1 2 3 >< f 1,2,3

f 1 2 3 = "1"
f 1,2,3 = [f 1],[2],[3]

[+ 2,] 1 2 3 4 5 >< [+ 2,] 1 , 2 , 3 , 4 , 5






T(x) -[+ 2]-> T(x + 2)

[1].flatMap(x => [x + 2]) === [3]

_(1).flatMap(x => _(x + 2)) === _(3)

[1,2,3,4,5]
.flatMap(x => [x + 2]) === [3,4,5,6,7]




赤 : 1
帽子 : 1

赤, 帽子 = [赤] [帽子] = 赤い帽子 = 赤 & 帽子 = 1
つまり,が直積 = 集合の積

赤 帽子 = [赤 帽子] = 赤か帽子 = 赤 ; 帽子 = 0
つまり が余積 = 集合の和

定義！
あるXがあり、そのXに演算が何かある場合で、

<T> , <T> => <T>

となる場合の型（構造）を「代数」という


<T> => <T> , <T>

となる場合の型（構造）を「余代数」という


つまり、モノイドという型が畳み込みが出来る型
