`,` と ` ` は随伴
`~a` と `a~` は随伴
`,` と `?` は随伴
` `はスタックにプッシュするだけ
`,`は、スタックを作って入れる


[1 2 3] = [1,2,3]~
[1,2,3]~ = [1 2 3]

~[1 2 3] = [1,2,3]
[1,2,3] = ~[1 2 3]

[1 2 3] , [4 5 6]
= [1 , [2 , [3 , _]]] , [4 , [5 , [6 , _]]]
= [[1 , [2 , [3 , _]]], _] [[4 , [5 , [6 , _]]] , _]
= [[[1 , [2 , [3 , _]]], [[4 , [5 , [6 , _]]] , _]], _]
= [1 2 3] , [4 5 6]

1 , 2 , 3 4 , 5 , 6
= [1 , [2 , [3 , _]]] [4 , [5 , [6 , _]]]
= [1 , [2 , [3 , [4 , [5 , [6 , _]]]]]]
= 1, 2, 3, 4, 5, 6
= [1 2 3 4 5 6]

a : 1 2 3
b : 4 5 6

a b = 1 2 3 4 5 6
a , b = 1 2 3 , 4 5 6
[a , b]~ = [a b]


赤 : 1
帽子 : 1

赤, 帽子 = [赤] [帽子] = 赤い帽子 = 赤 & 帽子 = 1
つまり,が直積 = 集合の積

赤 帽子 = [赤 帽子] = 赤か帽子 = 赤 ; 帽子 = 0
つまり が余積 = 集合の和

定義！
あるXがあり、そのXに演算が何かある場合で、

<T> , <T> => <T>

となる場合の型（構造）を「代数」という


<T> => <T> , <T>

となる場合の型（構造）を「余代数」という

つまり、モノイドという畳み込みが出来る型を、型そのものに拡大するとモナド

それの双代数（代数と余代数の双方を持つ演算の型）が重要になる。
