` reference\Hint\Impl_Preprocessor.md より例文

` ######################################################################
` 1. 引数名の標準化と位置ベース変換
` 原始構文
increment : n ? n + 1
add : x y ? x + y

L : x ? x
R : _ ~x ? x

map : f x ~y ? @f x, map f y~

foldr : f i l ~r ?
	!l : i
	@f l foldr f i r~

` ######################################################################
` 2. 部分適用と引数順序変換
` 原始構文
twice : f ? f f
flip : f x y ? f y x
f : x y z ? x * y + z
g : f 2 _ 3
` ↓動確用追加確認
g2 : f _ 5 _

` ######################################################################
` 3. メモリサイズと使用回数に基づくプリプロセス可能な最適化戦略
` ↓動確用追加確認
`テストケース1: 基本的な演算子インライン展開
add : [+]
mul : [*]
sub : [-]

result1 : add 5 7
result2 : mul 3 4
result3 : sub 10 2

`期待される変換結果:
`result1 : [+] 5 7
`result2 : [*] 3 4
`result3 : [-] 10 2

`テストケース2: 複合演算子と演算子チェーン
pow2 : [^ 2]
inc : [+ 1]
half : [/ 2]

square_and_add_ten : [pow2] [+ 10]

value1 : inc 5
value2 : pow2 4
value3 : square_and_add_ten 3
value4 : [inc] [pow2] 4

`期待される変換結果:
`value1 : [+ 1] 5
`value2 : [^ 2] 4
`value3 : [[^ 2]] [+ 10] 3
`value4 : [[+ 1]] [[^ 2]] 4

`テストケース3: 部分適用とUnit演算子の組み合わせ
`※最小版ではラムダ式を含む定義はインライン展開しない
add_n : [+] _
mul_by : _ [*]
between : _ < _ < _

add5 : add_n 5
triple : mul_by 3
in_range : between 0 _ 100
value5 : add5 10
value6 : triple 7
valid : in_range 42

`期待される変換結果:
`add5 : _0 ? [+] _0 5
`triple : _0 ? _0 [*] 3
`in_range : _0 ? 0 < _0 < 100
`value5 : [_0 ? [+] _0 5] 10
`value6 : [_0 ? _0 [*] 3] 7
`valid : [_0 ? 0 < _0 < 100] 42

`テストケース4: 高階関数とリスト処理
map_1 : [* 2,]
filter : [> 5,]
reduce : [+]

doubled : map_1 1 2 3 4
filtered : filter 3 7 2 9
sum : reduce 1 2 3 4

`期待される変換結果:
`doubled : [* 2,] 1 2 3 4
`filtered : [> 5,] 3 7 2 9 
`sum : [+] 1 2 3 4

`テストケース5: 複雑な組み合わせ
average : [/] [+] _ (length _)
square_sum : [+] ([^ 2,] _)
apply_twice : f ? f f

avg_value : average 1 2 3 4
squares : square_sum 1 2 3
twice_inc : apply_twice inc
value7 : twice_inc 5

`期待される変換結果:
`avg_value : [/] [+] 1 2 3 4 (length 1 2 3 4)
`squares : [+] ([^ 2,] 1 2 3)
`twice_inc : f ? f f
`value7 : [f ? f f] [+ 1] 5

`テストケース6: エッジケース
compose : f g ? f g _
identity : x ? x
nop : _

inc_then_double : compose mul inc
pass_through : identity 42
empty : nop

`期待される変換結果:
`inc_then_double : [f g ? f g _] [*] [+ 1]
`pass_through : [x ? x] 42
`empty : _


` ######################################################################
` 4. 比較演算の多項式の最適変換（初期段階では必要だが、最適化フェーズでは不要？）
` 原式
` 3 < x = y < 20 
` 変換後
` [[[3 < x & x] = y & y] < 20] & y
` 原式
` 1 <= x <= 100
` 変換後
` [[1 <= x & x] <= 100] & x
` ※変換しないほうが最適化しやすい見込み。実装しない

` ######################################################################
` 5. ブロック構文による条件分岐（match case対応）
` ### 5.1 基本変換パターン
` 原始構文
func : x ?
	condition1 : result1
	condition2 : result2
	condition3 : result3
	default_result

` ### 5.3 変換例
` #### 数値分類
` 原始構文
classify : n ?
	n = 0 : `zero`
	n > 0 : `positive`
	n < 0 : `negative`

` #### 範囲チェック
` 原始構文
grade : score ?
	score >= 90 : `A`
	score >= 80 : `B`
	score >= 70 : `C`
	score >= 60 : `D`
	`F`

` #### 複数引数での条件分岐
` 原始構文
compare : x y ?
	x > y : `greater`
	x = y : `equal`
	x < y : `less`

` #### 複雑な条件
` 原始構文
access_check : user role ?
	user = `admin` : `full_access`
	role = `moderator` & user != `guest` : `moderate_access`
	user != _ : `basic_access`
	`no_access`
