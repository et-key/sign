`これはコメント行`
`行末で閉じないコメントもテスト
`数値リテラルの全パターンテスト`

`基本数値`
x : -353.15134
y : 4001.35364502
zero : 0
negative : -42

`n進数リテラル（設計書重要機能）`
hexValue : 0xAF8534
hexValue2 : 0x1000
octValue : 0o3574  
binValue : 0b00101001
binValue2 : 0b0000

`文字列と文字のテスト`
Hello : `Hello World`
backslash : `Sign\s language`
unclosedString : `これは閉じられない文字列
char1 : \M
char2 : \n
char3 : \\
`char4 : \` のようなエッジケースは実用性が低く複雑化要因のため除外

`文字列結合テスト（設計書の例）`
My : \M \y \  \D \o \m \e \s \t \i \c

`Unitテスト（重要な基本要素）`
unit1 : _
unit2 : none : _

`インラインブロックの完全テスト`
func1 : [+ 1]
func2 : (x y ? x + y)
func3 : {a, b, c}
nested : [(x ? [+ 1] x)]
mixed : [func1, func2, func3]

`同一記号の位置による意味変化テスト（設計書の核心機能）`
`# 前置（export） vs 中置（output）`
#exported : `visible`
0xFF00 # `output to address`

`@ 前置（input） vs 中置（get） vs 後置（import）`
input_data : @0x1000
dict_access : obj @ key
imported : io@

`~ 前置（continuous） vs 中置（range） vs 後置（expand）`
continuous : ~x ? x
range_list : [1 ~ 10]
expand_list : args~

`! 前置（not） vs 後置（factorial）`
negation : !flag
factorial : 5!

`演算子優先順位テスト`
expr1 : x + y * z
expr2 : a ^ b ^ c
expr3 : !x & y | z
comparison : 1 <= x <= 10

`絶対値記法テスト`
abs1 : |x + y|
abs2 : ||x| - 5|

`インデントブロックの階層テスト`
complex : data ?
	level1 :
		level2 :
			level3 : `deep`
		back2 : `level2`
	back1 : `level1`

`条件分岐ブロック（match_case）`
classify : n ?
	n = 0 : `zero`
	n > 0 : `positive`
	n < 0 : `negative`
	`otherwise`

`リスト構築テスト`
list1 : 1, 2, 3, 4
list2 : 1 2 3 4
mixed_list : [func1,] [func2,] data

`範囲とスライステスト`
range1 : [1 ~ 10]
range2 : [2 ~ 4 ~ 10]
slice : myList ' [1 ~ 3]

`複雑な組み合わせテスト`
advanced : input ?
	temp : [> 0,] input
	result : 
		processed : [* 2,] temp
		final : processed ' [0 ~ 5]
	result

`エッジケースのテスト`
empty : 
edge1 : f : x ?
edge2 : ` ` 
unicode : `こんにちは世界`
