`Sign言語構文解析テストケース
`=== 1. 基本算術演算 ===
`期待: [[+] 1 2]
1 + 2
`期待: [[+] 1 [[*] 2 3]]
1 + 2 * 3
`期待: [[+] [[*] 1 2] 3]
1 * 2 + 3
`期待: [[*] [[^] 2 3] 4]
2 ^ 3 * 4
`期待: [[*] 2 [[^] 3 4]]
2 * 3 ^ 4
`期待: [[-] [[/] 10 2] 3]
10 / 2 - 3
`期待: [[-] 10 [[/] 2 3]]
10 - 2 / 3
`期待: [[+] [[+] [[^] x 2] [[*] [[*] 2 x] y]] [[^] y 2]]
x ^ 2 + 2 * x * y + y ^ 2
`期待: [[^] [[+] x y] 2]
(x + y) ^ 2

`=== 2. 単項演算子 ===
`期待: [[!_] x]
!x
`期待: [[_!] 5]
5!
`期待: [[@_] data]
@data
`期待: [[$_] ptr]
$ptr
`期待: [[~_] list]
~list
`期待: [[_~] list]
list~
`期待: [[_@] file]
file@
`期待: [[+] [[!_] x] 3]
!x + 3
`期待: [[*] [[_!] 5] 2]
5! * 2

`=== 3. 前置演算子の連続（リファレンスより） ===
`期待: [[@_] [[$_] i]]
@$i
`期待: [[$_] [[@_] a]]
$@a
`期待: [[@_] [[@_] [[$_] a]]]
@@$a
`期待: [[@_] [[$_] [[@_] a]]]
@$@a

`=== 4. 演算子の文脈依存 ===
`期待: [[@_] 0x1000]
@0x1000
`期待: [[@] key dict]
key @ dict
`期待: [[~_] args]
~args
`期待: [[~] 1 10]
1 ~ 10
`期待: [[#_] exported]
#exported
`期待: [[#] 0xFF00 data]
0xFF00 # data

`=== 5. 論理演算 ===
`期待: [[&] a b]
a & b
`期待: [[|] a b]
a | b
`期待: [[;] a b]
a ; b
`期待: [[|] [[&] a b] c]
a & b | c
`期待: [[&] [[!_] a] b]
!a & b
`期待: [[|] a [[&] b c]]
a | b & c
`期待: [[&] [[&] x y] z]
x & y & z

`=== 6. 比較演算 ===
`期待: [[>] [[+] x 1] 5]
x + 1 > 5
`期待: [[=] [[*] 3 x] 12]
3 * x = 12
`期待: [[<=] [[+] a b] [[-] c d]]
a + b <= c - d
`期待: [[<] [[=] [[<] 3 x] y] 20]
3 < x = y < 20
`期待: [[<=] [[<=] 1 x] 100]
1 <= x <= 100
`期待: [[=] [[=] a b] c]
a = b = c
`期待: [[>] [[<] x y] z]
x < y > z
`期待: [[>=] x 0]
x >= 0
`期待: [[<] x 0]
x < 0

`=== 7. 定義付きラムダ ===
`期待: [[:] f [[?] x [[+] x 1]]]
f : x ? x + 1
`期待: [[:] add [[?] x y [[+] x y]]]
add : x y ? x + y
`期待: [[:] square [[?] x [[^] x 2]]]
square : x ? x ^ 2
`期待: [[:] exp2fn [[?] x y [[^] [[+] x y] 2]]]
exp2fn : x y ? (x + y) ^ 2
`期待: [[:] double [[?] x [[*] x 2]]]
double : x ? x * 2
`期待: [[:] tail [[?] [_ [[~_] y]] y]]
tail : _ ~y ? y
`期待: [[:] head [[?] [x [[~_] y]] x]]
head : x ~y ? x

`=== 8. 定義 ===
`期待: [[:] x 42]
x : 42
`期待: [[:] result [[+] x y]]
result : x + y
`期待: [[:] add [+]]
`add_pf : [+]
`期待: [[:] double [[*] _ 2]]
`double : [* 2]

`=== 9. インラインブロック（ラムダ） ===
`期待: [[?] x [[+] x 1]]
[x ? x + 1]
`期待: [[?] x y [[+] x y]]
(x y ? x + y)
`期待: [[?] x [[*] x 2]]
{x ? x * 2}

`=== 10. インラインブロック（式のグルーピング） ===
`期待: [[*] [[+] a b] c]
(a + b) * c
`期待: [[*] [[+] x 1] 2]
(x + 1) * 2
`期待: [[*] [[+] x 1] 2]
[(x + 1) * 2]

`=== 11. インデントブロック（条件分岐） ===★条件分岐OR？
`期待: [[:] classify [[?] x [[|] [[|] [[&] [[=] x 0] 0] [[&] [[>] x 0] 1]] -1]]]
classify : x ?
	x = 0 : 0
	x > 0 : 1
	-1

`期待: [[:] abs [[?] x [[|] [[&] [[<] x 0] -x] x]]]
abs : x ?
	x < 0 : -x
	x

`期待: [[:] grade [[?] score [[|] [[|] [[&] [[>=] score 90] A] [[&] [[>=] score 80] B]] F]]]
grade : score ?
	score >= 90 : A
	score >= 80 : B
	F

`=== 12. 複数階層のインデントブロック ===
`期待: [[:] nested [[?] x [[|] [[&] [[>] x 0] [[:] inner [[?] y [[*] y 2]]] [inner x]] x]]]
nested : x ?
	x > 0 :
		inner : y ? y * 2
		inner x
	x

`期待: [[:] complex [[?] x [[|] [[|] [[&] [[=] x 0] `zero`] [[&] [[>] x 0] [[:] process [[?] n [[+] n 1]]] [process x]]] `negative`]]]
complex : x ?
	x = 0 : `zero`
	x > 0 :
		process : n ? n + 1
		process x
	`negative`

`=== 13. ポイントフリー記法（演算子のみ） ===
`期待: [+]
`[+]
`期待: [-]
`[-]
`期待: [*]
`[*]
`期待: [/]
`[/]
`期待: [^]
`[^]
`期待: [,]
`[,]

`=== 14. ポイントフリー記法（部分適用） ===
`期待: [[+] _ 2]
`[+ 2]
`期待: [[*] _ 2]
`[* 2]
`期待: [[-] _ 1]
`[- 1]
`期待: [[/] _ 2]
`[/ 2]
`期待: [[+] 2 _]
`[2 +]
`期待: [[*] 3 _]
`[3 *]
`期待: [[-] 10 _]
`[10 -]
`期待: [[,] [[*] _ 2]]
`[* 2,]
`期待: [[,] [[+] _ 1]]
`[+ 1,]

`=== 15. ポイントフリー記法（単項演算子） ===
`期待: [[_!] _]
`[_!]
`期待: [[!_] _]
`[!]
`期待: [[>] _ 0]
`[> 0]
`期待: [[<] _ 10]
`[< 10]
`期待: [[>=] _ 5]
`[>= 5]

`=== 16. リスト操作 ===
`期待: [[,] 1 [[,] 2 3]]
1, 2, 3
`期待: [[,] a [[,] b c]]
a, b, c
`期待: [[~] \a \z]
[\a ~ \z]
`期待: [['] list 0]
list ' 0
`期待: [[@] 0 list]
0 @ list
`期待: [['] list [[~] 1 3]]
list ' [1 ~ 3]
`期待: [[~][[~] 2 4] 10]
[2 ~ 4 ~ 10]

`=== 17. Get演算子 ===
`期待: [['] obj key]
obj ' key
`期待: [['] list 0]
list ' 0
`期待: [[@] key obj]
key @ obj
`期待: [[@] 0 list]
0 @ list
`期待: [['] [['] obj key1] key2]
obj ' key1 ' key2
`期待: [['] [['] car brand] 0]
car ' brand ' 0

`=== 18. 関数適用と合成（空白） ===
`期待: [f x]
f x
`期待: [f x y]
f x y
`期待: [[+] [f x] 2]
f x + 2
`期待: [[+] [[*] [f x] 2] 3]
f x * 2 + 3
`期待: [[[+] 1] [[[*] 2] 5]]
`[+ 1] [* 2] 5
`期待: [[[+] 2] 2]
`[+ 2] 2

`=== 19. 複雑な組み合わせ ===
`期待: [[:] calc [[?] x [[+] x [[*] 1 2]]]]
calc : x ? x + 1 * 2
`期待: [[:] calc2 [[?] x [[*] [[+] x 1] 2]]]
calc2 : x ? (x + 1) * 2
`期待: [[:] poly [[?] x [[+] [[+] [[^] x 2] [[*] 2 x]] 1]]]
poly : x ? x ^ 2 + 2 * x + 1
`期待: [[-] [[+] a b] [[/] [[*] c d] e]]
a + b - c * d / e
`期待: [[^] a [[^] b c]]
a ^ b ^ c

`=== 20. 実践例（exampleより） ===
`期待: [[[?] x x] 1 2 3]
`[x ? x] 1 2 3
`期待: [[[?] [_ [[~_] y] y]] 1 2 3]
`[_ ~y ? y] 1 2 3
`期待: [[[:] [[>] 3] [[+] 3]] 3 4]
`[> 3 : [+ 3]] 3 4
`期待: [[:] result2 [[-] 3 1]]
`result2 : [-] 3 1
`期待: [[+] [[[*] 2] 5]]
`[+] [* 2] 5

`=== 21. 数値リテラル ===
`期待: 0x1000
0x1000
`期待: 0o755
0o755
`期待: 0b1010
0b1010
`期待: 123.456
123.456
`期待: -42
-42
`期待: -353.15134
-353.15134

`=== 22. 高階関数パターン ===
`期待: [[[,] [[*] _ 2]] [1 2 3]]
`[* 2,] [1 2 3]
`期待: [[+] [1 2 3 4]]
`[+] [1 2 3 4]
`期待: [[Filter [[>] _ 0]] list]
`Filter [> 0] list
`期待: [[map [[*] _ 2]] data]
`map [* 2] data

`=== 23. 再帰関数（exampleより） ===
`期待: [[:] reverse [[?] [x [[~_] y]] [[,] [reverse [[_~] y]] x]]]
reverse : x ~y ? reverse y~, x
`期待: [[:] collatz [[?] x [[|] [[|] [[&] [[=] x 1] `OK`] [[&] [[=] [[%] x 2] 0] [collatz [[/] x 2]]]] [[&] [[=] [[%] x 2] 1] [collatz [[+] [[*] 3 x] 1]]]]]]
collatz : x ?
	x = 1 : `OK`
	x % 2 = 0 : collatz x / 2
	x % 2 = 1 : collatz 3 * x + 1

`=== 24. エクスポートとアウトプット ===
`期待: [[:] [[#_] hello] `hello`]
#hello : `hello`
`期待: [[#] 0xFF00 data]
0xFF00 # data
`期待: [[#] port output]
port # output

`=== 25. import操作（exampleより） ===
`期待: [[_@] io]
io@
`期待: [[_~] [[_@] io]]
io@~

`=== 26. 辞書型アクセスの連鎖 ===
`期待: [['] [['] [['] myGreet greet] welcome] world]
myGreet ' greet ' welcome ' world

`=== エラーパターン例 ===
`エラー: 前置演算子に不正な空白
`! x
`エラー: 後置演算子に不正な空白
`x !
`エラー: 前置演算子の不正な連続
`!!x
`エラー: 前置演算子の不正な連続
`-!x
`エラー: 定義のないラムダ
`x ? x + 1
