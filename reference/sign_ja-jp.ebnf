(* Sign言語のEBNF - 修正最終版 *)

(* プログラム全体の構造 *)
Program = { Line } ;

(* 行構造 *)
Line = [ TabIndentation ], LineContent, NewLine | EmptyLine ;
EmptyLine = NewLine ;
LineContent = Expression | StringLiteral ;  (* 行頭の文字列リテラルはコメントとして扱われる *)
TabIndentation = { Tab } ;  (* タブによるインデント - ブロック構築演算子 *)

(* 式の階層 - 優先順位順 *)
Expression = OperatorExpression ;

(* 演算子表現 - すべての演算子は最終的に関数適用として解釈される *)
OperatorExpression = ExportExpression ;

(* エクスポート領域 *)
ExportExpression = "#", NoSpace, Identifier, [ Space ], ":", [ Space ], Expression | DefinitionExpression ;
(* 意味解析時に [#_ identifier] に変換 - 前置演算子は後ろに_を付加 *)

(* 定義・出力領域 *)
DefinitionExpression = Identifier, [ Space ], ":", [ Space ], Expression | 
                      (Identifier | HexNumber), [ Space ], "#", [ Space ], Expression |
                      ConstructionExpression ;
(* 意味解析時に [: identifier] や [# identifier/hex] に変換 *)

(* 構築領域 *)
ConstructionExpression = CoproductExpression | 
                        LambdaExpression |
                        ProductExpression |
                        RangeExpression |
                        RestArgExpression |
                        LogicalExpression ;

(* 余積 - スペースによって区切られた式 *)
CoproductExpression = Expression, AtLeastOneSpace, Expression ;
(* 意味解析時に [ ] (空白演算子)として変換 *)

(* ラムダ構築 *)
LambdaExpression = ParameterList, [ Space ], "?", [ Space ], Expression |
                  ParameterList, [ Space ], "?", NewLine, BlockExpression ;
(* 意味解析時に [? params expr] に変換 *)

(* 積 - カンマで区切られた式 *)
ProductExpression = Expression, [ Space ], ",", [ Space ], Expression ;
(* 意味解析時に [, left right] に変換 *)

(* 範囲リスト *)
RangeExpression = Expression, [ Space ], "~", [ Space ], Expression ;
(* 意味解析時に [~ left right] に変換 *)

(* 残り引数 *)
RestArgExpression = "~", NoSpace, Identifier ;
(* 意味解析時に [~_ identifier] に変換 - 前置演算子は後ろに_を付加 *)

(* ブロック式 - インデントブロックのための特別な処理 *)
BlockExpression = IndentedBlock ;
IndentedBlock = IndentedLine, { IndentedLine } ;
IndentedLine = CurrentIndentation, Tab, Expression, NewLine ;
CurrentIndentation = ? current indentation level ? ;  (* パーサーの状態として管理 *)
(* 意味解析時にブロック内の式をリストとして結合 *)

(* 論理領域 *)
LogicalExpression = LogicalOrExpression ;

LogicalOrExpression = LogicalXorExpression, { [ Space ], "|", [ Space ], LogicalXorExpression } ;
(* 意味解析時に [| left right] に変換 *)

LogicalXorExpression = LogicalAndExpression, { [ Space ], ";", [ Space ], LogicalAndExpression } ;
(* 意味解析時に [; left right] に変換 *)

LogicalAndExpression = NotExpression, { [ Space ], "&", [ Space ], NotExpression } ;
(* 意味解析時に [& left right] に変換 *)

NotExpression = "!", NoSpace, NotExpression | ComparisonExpression ;
(* 意味解析時に [!_ expr] に変換 - 前置演算子は後ろに_を付加 *)

(* 比較演算領域 *)
ComparisonExpression = ArithmeticExpression, [ [ Space ], ComparisonOperator, [ Space ], ArithmeticExpression ] ;
ComparisonOperator = "<" | "<=" | "=" | ">=" | ">" | "!=" ;
(* 意味解析時に [op left right] に変換 *)

(* 算術演算領域 *)
ArithmeticExpression = AddExpression ;

AddExpression = MulExpression, { [ Space ], ("+" | "-"), [ Space ], MulExpression } ;
(* 意味解析時に [+ left right] や [- left right] に変換 *)

MulExpression = PowerExpression, { [ Space ], ("*" | "/" | "%"), [ Space ], PowerExpression } ;
(* 意味解析時に [* left right] や [/ left right] や [% left right] に変換 *)

PowerExpression = FactorialExpression, { [ Space ], "^", [ Space ], FactorialExpression } ;
(* 意味解析時に [^ left right] に変換 *)

FactorialExpression = AccessExpression, [ NoSpace, "!" ] ;
(* 意味解析時に [_! expr] に変換 - 後置演算子は前に_を付加 *)

(* 解決評価領域 *)
AccessExpression = PrimaryExpression, { 
                    NoSpace, "~" |  (* 展開後置演算子 - 意味解析時に [_~ expr] に変換 *)
                    [ Space ], "'", [ Space ], AccessExpression |  (* 取得中置演算子 - 意味解析時に [' left right] に変換 *)
                    [ Space ], "@", [ Space ], AccessExpression  (* 取得中置演算子 - 意味解析時に [@ left right] に変換 *)
                  } ;

(* 入出力・インポート領域 *)
IOExpression = "@", NoSpace, (Identifier | HexNumber) |  (* 入力前置演算子 - 意味解析時に [@_ expr] に変換 *)
              (Identifier | String), NoSpace, "@" ;  (* インポート後置演算子 - 意味解析時に [_@ expr] に変換 *)

(* 基本式 *)
PrimaryExpression = Atom | "$", NoSpace, Identifier | IOExpression |
                   AbsoluteValue | InlineBlock ;
(* $ 前置演算子は意味解析時に [$_ expr] に変換 *)

(* 基本要素 *)
Atom = Number | Character | String | List | Lambda | Identifier | Unit ;

(* 数値 *)
Number = Integer | Float | HexNumber | OctalNumber | BinaryNumber ;
Integer = [ "-" ], Digit, { Digit } ;
Float = [ "-" ], Digit, { Digit }, ".", Digit, { Digit } ;
HexNumber = "0x", HexDigit, { HexDigit } ;
OctalNumber = "0o", OctalDigit, { OctalDigit } ;
BinaryNumber = "0b", BinaryDigit, { BinaryDigit } ;

Digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
HexDigit = Digit | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f" ;
OctalDigit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" ;
BinaryDigit = "0" | "1" ;

(* 文字 *)
Character = "\", AnyCharacter ;
AnyCharacter = ? any character ? ;

(* 文字列 *)
String = StringLiteral ;
StringLiteral = "`", { Character - NewLine }, "`" ;

(* リスト *)
List = [ Expression ], { ",", [ Space ], Expression } ;
(* 意味解析時にリスト構造に変換 *)

(* ラムダ式 *)
Lambda = ParameterList, [ Space ], "?", [ Space ], Expression ;
(* 意味解析時にラムダ関数として変換 *)

ParameterList = Identifier, { Space, Identifier } | 
                "~", NoSpace, Identifier ;
(* パラメータリストの処理 *)

(* 識別子 *)
Identifier = (Letter | "_"), { Letter | Digit | "_" } - "_" ;
Letter = ? any letter character ? ;

(* 単位 *)
Unit = "_" ;

(* インラインブロック *)
InlineBlock = BlockStart, [ Space ], Expression, [ Space ], BlockEnd ;
BlockStart = "(" | "[" | "{" ;
BlockEnd = ")" | "]" | "}" ;  (* BlockStart と BlockEnd は対応する必要がある *)
(* 意味解析時にブロック内の式を評価 *)

(* 絶対値 *)
AbsoluteValue = "|", NoSpace, Expression, NoSpace, "|" ;
(* 意味解析時に [abs expr] に変換 *)

(* 空白関連の定義 - タブと改行を除外 *)
Space = " ", { " " } ;  (* スペースのみ、タブや改行は含まない *)
AtLeastOneSpace = " ", { " " } ;  (* 少なくとも1つのスペース *)
NoSpace = ? absence of whitespace ? ;  (* 空白なし - 前置/後置演算子用 *)

Tab = ? tab character ? ;  (* タブはブロック構築演算子 *)
NewLine = ? newline character ? ;  (* 改行は評価後置演算子 *)

(* 型定義 *)
TypeDefinition = "\"", Identifier, "\"", [ Space ], ":", [ Space ], TypeExpression ;
TypeExpression = "\"", TypeIdentifier, "\"", { [ Space ], "\"", TypeIdentifier, "\"" } ;
TypeIdentifier = "Number" | "String" | "List" | ? any type name ? ;
(* 意味解析時に型情報として処理 *)

(* 辞書型 *)
Dictionary = Identifier, [ Space ], ":", NewLine, DictionaryEntries ;
DictionaryEntries = IndentedLine, { IndentedLine } ;
(* 意味解析時に辞書/マップ構造として変換 *)
