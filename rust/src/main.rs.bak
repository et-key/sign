use regex::Regex;

fn process_comparison_chain(expr: &str) -> String {
    let operator_re = Regex::new(r"(<|=|>|!=|<=|>=)").unwrap();
    let parts: Vec<&str> = operator_re.split(expr).map(|s| s.trim()).collect();
    let ops: Vec<&str> = operator_re.find_iter(expr).map(|m| m.as_str()).collect();

    if parts.len() <= 2 {
        return expr.to_string();
    }

    let mut result = Vec::new();
    for i in 0..parts.len() - 1 {
        if !parts[i].is_empty() {
            if i > 0 {
                result.push("&".to_string());
            }
            result.push(format!("{} {} {}", parts[i], ops[i], parts[i + 1]));
        }
    }

    result.join(" ")
}

fn process_and_replace_brackets_content(input: &str) -> String {
    let bracket_re = Regex::new(r"\(([^()\[\]{}]*)\)|\[([^()\[\]{}]*)\]|\{([^()\[\]{}]*)\}").unwrap();
    let mut result = input.to_string();
    let mut changed = true;
    let mut iterations = 0;
    const MAX_ITERATIONS: usize = 1000;

    while changed && iterations < MAX_ITERATIONS {
        changed = false;
        iterations += 1;
        result = bracket_re.replace_all(&result, |caps: &regex::Captures| {
            changed = true;
            let content = caps.iter().skip(1).find_map(|m| m).unwrap().as_str();
            let processed = process_comparison_chain(content);
            format!("{}{}{}", &caps[0][..1], processed, &caps[0][caps[0].len()-1..])
        }).to_string();
    }

    if iterations == MAX_ITERATIONS {
        println!("Warning: Reached maximum number of iterations. Result may be incomplete.");
    }

    process_comparison_chain(&result)
}

fn main() {
    let test_cases = vec![
        "This is (3 < x < y != 7 < 10)",
        "(x < y < z) = a = b = c",
        "{Outer [inner (1 < 2 < 3)] outer}",
        "((a < b < c)[d > e > f]){g = h = i}",
        "[{(a < b < c) - d * 3} < e < f]",
        "Nested {brackets [are (1 = 2 = 3 = 4) correctly]}",
        "a < b < c < d < e",  // 連続した比較演算子のテスト
    ];

    for test in test_cases {
        println!("Input: {}", if test.len() > 50 { &test[..50] } else { test });
        let processed = process_and_replace_brackets_content(test);
        println!("Processed: {}", if processed.len() > 50 { &processed[..50] } else { &processed });
        println!("---");
    }
}