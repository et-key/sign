start       = { SOI ~ expression* ~ EOI }

expression  = {
  export
  | define_type
  | get_type
  | define
  | lambda
  | list
  | or_xor
  | and
  | not
  | compare
  | add_sub
  | mul_div
  | power
  | factrial
  | coproduct
  | get
  | import
  | literal
  | block
}

NewBlock = _{
  PEEK_ALL ~ PUSH(indent+) ~ expression ~ (PEEK_ALL ~ expression)* ~ DROP
}

block = _{
  NEWLINE ~ NewBlock
  | "[" ~ expression+ ~ "]"
  | "{" ~ expression+ ~ "}"
  | "(" ~ expression+ ~ ")"
}

indent_line = {
  NEWLINE ~ indent
}

indent      = { "\t" }

prefix      = {
  f_export
  | f_not
}

infix_L     = {
  f_product
  | f_coproduct
  | f_or
  | f_xor
  | f_and
  | f_add
  | f_sub
  | f_mul
  | f_div
  | f_mod
  | f_spread
  | f_get
}

compare_op  = {
  f_less
  | f_less_eq
  | f_eq
  | f_neq
  | f_more_eq
  | f_more
}

infix_R     = {
  f_assign
  | f_power
}

postfix     = @{ "_" ~ f_factrial }

f_export    = { "#" }
f_assign    = { ":" }
f_lambda    = { "?" }
f_product   = { "," }
f_coproduct = { " " | "\" \""}
f_or        = { "|" }
f_xor       = { ";" }
f_and       = { "&" }
f_not       = { "!" } //prefix
f_less      = { "<" }
f_less_eq   = { "<=" }
f_eq        = { "=" | "==" }
f_neq       = { "!=" }
f_more_eq   = { ">=" }
f_more      = { ">" }
f_add       = { "+" }
f_sub       = { "-" }
f_mul       = { "*" }
f_div       = { "/" }
f_mod       = { "%" }
f_power     = { "^" }
f_factrial  = { "!" } //postfix
f_get       = { "'" }
f_spread    = { "~" }
otherwise   = { unit }

export      = { f_export ~ expression+ }

define_type = {
  "\"" ~ (ANY) ~ "\"" ~ f_assign ~ expression+
}

get_type = {
  "\"" ~ expression+ ~"\""
}

define      = {
  ident ~ f_assign ~ expression+
}

lambda      = {
  ident ~ (ident | f_spread ~ ident)* ~ f_lambda ~ expression+
  | point_free
  | match_case
  | unit
}

point_free  = {
  (ident | infix_L | compare_op | infix_R) ~ literal
  | (number | charactor | string) ~ (infix_L | compare_op | infix_R)
  | (infix_L | compare_op | infix_R) ~ expression+ ~ NEWLINE
  | prefix
  | postfix
}

match_case = {
  (indent_line ~ ((literal | otherwise) ~ f_assign ~ expression+))+
}

l_product   = _{
  lambda
  | or_xor
  | and
  | not
  | compare
  | add_sub
  | mul_div
  | power
  | factrial
  | number
  | string
  | dictionary
  | block
}

dictionary  = {
  match_case
}

list     = {
  l_product ~ (f_product ~ expression)+
  | ((indent ~ (expression ~ f_product))+ ~ NEWLINE)+
  | "[" ~ (expression ~ f_product)* ~ expression ~ "]"
  | "{" ~ (expression ~ f_product)* ~ expression ~  "}"
  | "(" ~ (expression ~ f_product)* ~ expression ~  ")"
  | (integer) ~ f_spread ~ (integer)
}

unit        = @{ "_" | "[]"}

or_xor      = {
  and ~ f_or ~ or_xor
  | and ~ f_xor ~ or_xor
  | and
}

and         = {
  not ~ f_and ~ and
  | not
}

not        = {
  f_not ~ (number | compare | ident)
  | number
  | compare
  | ident
}

compare     = {
    add_sub ~ f_less ~ add_sub
  | add_sub ~ f_less_eq ~ add_sub
  | add_sub ~ f_eq ~ add_sub
  | add_sub ~ f_neq ~ add_sub
  | add_sub ~ f_more_eq ~ add_sub
  | add_sub ~ f_more ~ add_sub
  | add_sub
}

add_sub     = {
  mul_div ~ f_add ~ add_sub
  | mul_div ~ f_sub ~ add_sub
  | mul_div
}

mul_div     = {
  power ~ f_mul ~ mul_div
  | power ~ f_div ~ mul_div
  | power ~ f_mod ~ mul_div
  | power
}

power       = {
  factrial ~ f_power ~ power
  | factrial
}

factrial    = {
  (number | ident) ~ f_factrial
  | number
  | ident
}

coproduct   = {
  compose
  | concat
}

compose   = {
  lambda ~ (f_coproduct ~ compose)+ 
}

concat      = {
  charactor+ ~ (f_coproduct ~ ident | concat+)*
  | string+ ~ concat*
}

get         = {
  ident ~ (f_get ~ ident)*
}

import      = {
  "@" ~ (ident | string)
}

literal     = @{
  number
  | charactor
  | string
  | lambda
  | list
  | none
  | ident
}

number = {
  natural
  | integer
  | real
  | hex
}

natural     = @{ ASCII_DIGIT+ }

integer     = @{ "-"? ~ natural }

real        = @{ integer ~ "." ~ natural }

hex         = @{ "0x"~ ASCII_HEX_DIGIT+ }

charactor   = @{ "\\" ~ ANY }

string      = { "`" ~ (!NEWLINE ~ ANY)* ~ "`" }

ident       = {
  (ASCII_ALPHANUMERIC | "_")+ ~ (ASCII_ALPHA | "_")
  | f_spread ~ string
}

none        = { unit }