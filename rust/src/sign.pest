WHITESPACE = _{ " " | "\r" | "\n"}
program = { SOI ~ expression* ~ EOI }

expression = { export }

export = { f_export? ~ define }
define = { coproduct ~ (f_define ~ define)? }
coproduct = { lambda ~ (apply | literal_product)* }
  apply = { closure ~ (apply | literal_product)* }
  literal_product = { literal ~ (apply | literal_product)* }
lambda = { product+ ~ (f_lambda ~ lambda)? }
product = { spread ~ (f_product ~ product)? }
spread = { lift ~ (f_spread ~ lift)? }
lift = { f_spread? ~ or_xor }
or_xor = { and ~ ((f_or | f_xor) ~ or_xor)? }
and = { not ~ (f_and ~ and)? }
not = { f_not* ~ compare }
compare = { add ~ (compare_op ~ compare)? }
add = { mul ~ ((f_add | f_sub) ~ add)? }
mul = { power ~ ((f_mul | f_div | f_mod) ~ mul)? }
power = { factorial ~ (f_power ~ power)? }
factorial = { flat ~ f_factorial* }
flat = { get ~ f_spread? }
get = { import ~ (f_get ~ get)? }
import = { f_import? ~ (block | literal) }

block = {
  (f_block+ ~ expression)
  | closure
  | "(" ~ expression ~ ")"
  | "[" ~ expression ~ "]"
  | "{" ~ expression ~ "}"
}

closure = {
    point_free
  | partial_application
  | "(" ~ (lambda | point_free | partial_application) ~ ")"
  | "{" ~ (lambda | point_free | partial_application) ~ "}"
  | "[" ~ (lambda | point_free | partial_application) ~ "]"
}

point_free = {
    prefix
  | postfix_point_free
  | infix
  | infix_l
  | infix_r
  | literal ~ infix
  | literal ~ infix_l
  | literal ~ infix_r
  | infix ~ literal
  | infix_l ~ literal
  | infix_r ~ literal
}

postfix_point_free = @{ "_" ~ postfix }
partial_application = { (identifier | point_free) ~ coproduct }

prefix = { f_not | f_spread }
infix_l = { f_product | f_or | f_xor | f_and | f_add | f_sub | f_mul | f_div | f_mod | f_get }
infix_r = { f_define | f_lambda | f_power }
postfix = { f_factorial | f_spread }

infix = { compare_op | f_spread }
compare_op = { f_less | f_less_eq | f_eq | f_neq | f_more_eq | f_more }

f_export = { "#" }
f_define = { ":" }
f_lambda = { "?" }
f_product = { "," }
f_or = { "|" }
f_xor = { ";" }
f_and = { "&" }
f_not = { "!" }
f_less = { "<" }
f_less_eq = { "<=" }
f_eq = { "=" | "==" }
f_neq = { "!=" | "><" | "<>"}
f_more_eq = { ">=" }
f_more = { ">" }
f_add = { "+" }
f_sub = { "-" }
f_mul = { "*" }
f_div = { "/" }
f_mod = { "%" }
f_power = { "^" }
f_spread = { "~" }
f_factorial = { "!" }
f_get = { "'" }
f_import = { "@" }
f_block = { "\t" }

literal = { number | string | letter | unit | identifier }
number = {float | int | uint | hex | oct | bit }
uint = @{ ASCII_DIGIT+ }
int = @{ "-"? ~ ASCII_DIGIT+ ~ !(("." ~ ASCII_DIGIT*) | "e" | "E") }

float = @{ 
    "-"? ~ (
        (ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?) |
        (ASCII_DIGIT+ ~ ^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+) |
        ("." ~ ASCII_DIGIT+ ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?)
    )
}

hex = @{ "0x" ~ ASCII_HEX_DIGIT+ }
oct = @{ "0o" ~ ASCII_OCT_DIGIT+ }
bit = @{ "0b" ~ ASCII_BIN_DIGIT+ }
string = { "`" ~ (!("`" | "\n") ~ (" " | ANY))* ~ "`" }
letter = ${ "\\" ~ (NEWLINE | " " | ANY) }
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
unit = { "_" }
