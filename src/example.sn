# Sign Programming Language Concept and Examples

`Strings are enclosed in backQuotes`
`Lines that start or are in the middle with only literals that don't make sense are not executed. Therefore, the line above is not executed.`
`Even if a line contains only literals, if it's the last line of a function, it becomes the return value.`
`Hence, comments are written as strings.`

`A line break is a postfix operator meaning "evaluate".`
`If you don't want a line break to represent evaluation, use a line break character.`
`Indentation at the beginning of a line forms a block.`

`The normal evaluation strategy of this language is lazy evaluation.`

`":" means "that is" in English, so it's used as an assignment operator, while = is strictly a comparison operator.`
`Even just looking below, it should be obvious that in this language, names become types.`

x: 3

`The line directly below is not evaluated because the evaluation operator is escaped as a character.`

y: 4 '

Hello: `Hello`
World: `World`

`true is $, false is \`

yep: $
nop: \

`An assignment operator that is not in a block is a right unit element and is syntactic sugar for distributive syntax.`

unit: none: []

`The above means the same as the following syntax`

none: []
unit: []

`In this language, both parentheses and indentation represent blocks, have local scope, and are recognized as being processed with priority.`
`In other words, the scope of names is determined by blocks`

  y: $
  n: \

`The above is deleted when leaving the block, so it returns none(unit) along with a "y wasn't defined" error.`

[y = $] = _

`However, it can be accessed as follows.`

[
  `y`: $
  `n`: \
] `y`

`How to define lambda terms`
`The basic lambda term uses ?.`
`Functions without assignment need to be enclosed in parentheses. This is because the start of parentheses means the creation of a stack.`

[x y ? x ^ 2 + 2 * x * y + y ^ 2]

`The above is equivalent to the following expression by factorization.`
`By reinterpreting parentheses as the definition start of a block (stack), the priority of expressions can be expressed.`

[x y ? (x + y) ^ 2]

`In some cases, the description can be further simplified using point-free style and function composition`
`The description of point-free functions is a direct description of operators, so the type is self-evident.`
`The position of parentheses for the priority of function composition remains unchanged.`

[[+] ^ 2]

`There are shorthands for comparison operations.`

`[x = y] & [y = z]`

x = y = z

`[1 <= x] & [x <= 9]`

1 <= x <= 9

`However, if priority is indicated by parentheses, the inside is evaluated first.`

[3 = 3] = $

`If you don't want function application or composition, you can handle it by putting a comma immediately after the function to make it a direct product.`

[+ 2] 2 = 4
[+ 2], 2 = [+ 2], 2

`Lambda terms can also describe constant assignments and constant functions`

iterate3 : 1 ? 2 ? 3

`It is evaluated because there is a space at the end.`

iterate3 = 1, [? 2 ? 3]
iterate3 = 2, [? 3]
iterate3 = 3, []
iterate3 = []
iterate3 = []

`Point-free descriptions of unary expressions take arguments in the order of right, left.`
`The first argument of a function can be written before the function`
`If it's after :, [] can be omitted if the point-free description is a unary expression.`

result2 : - 1 3
add : +
exp : ^
id : x ? x

`Since the priority of function evaluation is lower than lambda definition, processing of such expressions cannot omit parentheses.`

[[-] 1 3] = [[- 1] 3] = 3 - 1

`The following functions as a head-returning function.`

[x ? x] 1 2 3 = 1
[x ? x] 1, 2, 3 = 1

[1 2 3] '0 = 1
[1, 2, 3] '0 = 1

`The following functions as a tail-returning function.`

[_ ~y ? y~] 1 2 3 = 2 3
[_ ~y ? y~] 1, 2, 3 = 2 3

['1~] 1 2 3 = 2 3
['1~] 1, 2, 3 = 2 3

`In this language, for those who really want to write types, you can type and read types by enclosing names in " (not recommended)`
`Why the type becomes automatically correct if the syntax is correct is self-evident from the following typing`
`The type to which a function is applied is expressed as the type to which the function is applied, so it becomes the same as the implementation.`
`Of course, the type of an executed function is automatically type-cast to the post-execution type,`
`This is related to the fact that type calculation is done later due to lazy evaluation.`
`As a result, the compiler or interpreter doesn't need to guarantee type safety.`
`Arguments passed to higher-order functions need to be written separately whether to evaluate or not by direct product.`

typeOf : x ? "x"
id : x ? x

"map" : "f" "x" "~y" ? "f" "x" , "map" "f", "y~"
map : f x ~y ? f x , map f, y~

"fold" : "f" "x" "y" "~z" ? "fold" "f", "f" "x" "y", "z~"
fold: f x y ~z ? fold f, f x y, z~

`match_case can be written using block syntax as follows.`
`The block becomes guard notation.`
`Block-ified assignment operators are also this in nature`
`If you assign the block itself or enclose it in parentheses and generate it immediately, it's just like a normal function.`

[ x ?
  x = 0 : `zero`
  x > 0 : `more`
  x < 0 : `less`
  _     : `other`
] 3

`Constructor-like description.`
`It's possible to assign dynamic key names.`

Person : name age etc x key ?
  key = `name` : name
  key = `age`  : age
  key = etc : x

john : Person `john` 18 `Like` `Sushi`

john `name`

`Quote casts the following ident to a string.`

john ' name

`Create a copy of the person instance using the spread operator and overwrite values`

person : Person [] [] [] []

mary : 
  ~person
    ' name : `mary`
    ' age  : 16

charie : 
  ~person
    ' name : `charie`
    ' age  : 24

`From here on, we'll use the shorthand notation.`

[
  0   : `zero`
  > 0 : `more`
  < 0 : `less`
  _   : `other`
] 3

`Behavior like a ternary operator can also be defined as follows.`

[
  $ : `yep`
  \ : `nop`
] $ = `yep`

`This is also equivalent to match_case, and with this description, if-then can be reproduced`
`If there is no otherwise description and it matches otherwise, it returns the passed value as is.`

[> 3 : [+ 3]] 3 4 = 4

`Data class-like descriptions are also shorthand for match_case.`

Item : 
  name
  equip
  use
  effect

medicalWeed    : Item `medicalWeed`, _, [[' medicalWeed], [- 1]], [[' HP], [+ 20]]

lightningStaff : Item `lightningStaff`, [[' Atk] [+ 8]], $, [' ThunderBolt]

`The so-called let ~ in is written as follows.`
`It actually becomes the same as a monadic description.`

myValue : 3
  [+ 4]
  [* 2]

`List definition is basically comma-separated.`
`"," represents "strong separation" or "direct product" in English.`
`" " is used for "direct sum".`
`For scalar types of coproduct, commas can be omitted.`
`It's also clear that lambda evaluation has lower priority than other expressions or terms.`
`The way lists function as iterators is well understood by looking at the form where the head function is not omitted.`
`It beautifully reproduces that implementation is type.`
`Similarly, it also shows that "," and " " are adjoint by the adjoint functor theorem.`

myPairs: 1 2 3 4 5
myPairs0: [,] 1 2 3 4 5
myPairs1: 1, 2, 3, 4, 5

myPairs0 = myPairs = myPairs1

[,] myPairs = [[1], [2], [3], [4], [5]]

`This is direct sum (array composition)`

r: [1 2] [3 4]

`This is direct product (2D array)`

s: [1 2],[3 4]

`Expressions that look like dictionary types are the same as anonymous functions performing match_case, and the type of bracket doesn't matter. They can also be defined with indentation.`
`However, opening and closing brackets must always be in pairs.`

myGreet:
  greet: 
    hello: `hello,`
    welcome: `welcome,`
  world: ` world`

`Therefore, access becomes using ident, string, or natural or hex as arguments.`

myGreet ' greet ' hello = `hello,`

myPairs ' 0 = 1

myPairs ' [1 ~ 3] = 2 3 4

`By using block scope, you can directly write get within the block scope.`
`This block syntax, of course, has a return value when the operation ends.`
`This returns a direct sum if a direct sum of results is possible in the block scope.`

myGreet
  'greet
    'welcome
  'world
= `welcome, world`

`Value modification is possible`

myGreet
  'greet
    'welcome : `welcome to our `
  'world : `metaverse!`

`By inferring only primitive types, it is designed so that actual type problems can be solved.`
`All given names are definitions, and because they are also self-evident types, names are types.`

`The ~ operator can expand only match_case that mimics dictionary types on the target scope.`
`If it's a prefix, it's prioritized over other terms, and if it's a postfix, other terms are prioritized.`

~[
  y: $
  n: _
]

y = $

`The @ prefix operator is import. It can also be specified from file names, and path specification is possible`
`Since match_case can be regarded as a dictionary type, it can be expanded to one level up scope with the ~ operator, so import that can be used in files is also possible with ~@.`

@io
  say Hello World

`Since it's not an import on the file scope, the line below returns a "Say is not defined" error.`

say Hello World

`Expand and use in file scope.`

~@Funnctor
~@Monoid
~@io

say fold [+] map [* 4] 1 2 3 4 5

`Any one character after ' is always one character of character type value.`
`List-ification of scalar values normally uses space or comma, but in the case of character literals and string literals,`
`There are cases where concatenation can be expressed by direct description, so describe that pattern.`

M: 'M

My: M 'y' 'D'o'm'e's't'i'c
`Hello ` `World!` = `Hello World!`
`Hello` '  `World!` = `Hello World!`
'H `ello` '  `World` '! = `Hello World!`
`Hello ` My ' World!` = `Hello My Domestic World!`
Hello '  My '  `World` '! = `Hello My Domestic World!`
`Hello` '!' My World '! = `Hello! My Domestic World!`

`If you want to express a string containing line breaks, it becomes a block-like writing.`
`The reason is that ` ` means "list concatenation, function composition, and function application".`
`If you want to include line breaks.`

HWinEnter :
 `Hello` '
 `World!`

`"#" becomes export.`
`Normal functions always return the value of the last line, and match_case returns the value or function corresponding to the specified value`
`Although the entire file is also one function, anything other than those indicated by export, i.e., #, does not leave its own scope.`

# myDict : name value; ~name : value
# gets : ?

`Logical operators are short-circuit evaluated.`

\ & `me` = \
$ & `me` = `me`

\ | `me` = `me`
$ | `me` = $

\ ; `me` = `me`
$ ; `me` = \
