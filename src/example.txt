"文字列だけの行は実行されない。"
"文字列は、"""で始まり、""[\s]"で終わる。"

"Hello World"

"この言語はファイルごとのスコープを持つ。"

"":"は英文では「即ち」、「代入」を表す。"
"この言語ではカッコはブロックを表し、ローカルスコープを持ち、優先に処理されるものと認識される。"
"辞書型も表現可能で、カッコの種類は問わない。"
"ただし、開カッコと閉カッコは必ず対になる必要がある。"
"プリミティブな型のみを推論することで、実際の型の問題が解決できるような設計となる。"
"与えられた名前は全て定義であり、それが自明な型でもあるため、名前が型である。"
"改行がその行の評価を行う構造とする（BASICっぽい）"

x: 3
y: 4
point: [
  x: 0
  y: 3
  z: 2
]

message: "Hello World"


"空白を含めたい場合は、文字と文字列を結合する"
says : "You say "Good Bye..."" `  "I say "Hello""

""'"は英文の"'s"「所有」を由来とし、アクセッサー演算子である。"
"キー名を文字列指定もできる。変数に代入された文字列の場合、展開演算子"~"で中の文字列を取り出して使う"

point ' x
point ' x : 2

my_name: "mike"

point ' ~my_name

"","は英文では「強い区切り」、「直積」を表す。"
"" "は「直和」に使われる。"
"要素に任意に要素を追加出来る。"

"ここからスカラー型では同じ意味"

  p0: x, y
  p1: x y
  p2: (x, y)
  p3: (x y)
  p4: {x, y}
  p5: {x y}
  p6: [x, y]
  p7: [x y]

"ここまでスカラー型では同じ意味"

q: [
  r: [1 2]
  s: [2 4]
]

"これは直和（配列の合成）"
r: [1 2] [3 4]

"これは直積（2次元配列）"
s: [1 2],[3 4]

"";"は英文では関連ある弱い区切り、「ラムダ項」を表す。"
"右や左、左右両方を省略された演算子をカッコで囲んでも「ラムダ項」とする"
"ラムダ項を即時で利用する場合は、カッコで囲む。カッコの種類は問わない。"
"この言語では、あくまでラムダとしての関数定義のみ行える。"
"よって名前を付けたければ、「即ち」を使う"
"関数に対する「直和」とは、「関数の評価」となる、よって関数をリストにしたければ「直積」のみが表記として可能"
""  "（字下げ）によって、関数を複数行に分けることも可能"

(x ; x * 2) 3
{x ; x * 2} 3
[x ; x * 2] 3
* 2 3

(x ; 3 * x) 2
{x ; 3 * x} 2
[x ; 3 * x] 2
3 * 2

id: x; x
dup: x; x, x
f: * 2
g: + 3
eval:  


"関数合成は以下のように書く、この場合、lambdaはカッコで囲む演算子の優先順位は消える"

[f g [+]] 5 4
[[* 2] [+ 3] [+]] 5 4

"スプレッドオペレータ"
[[* 2] [+ 3] [+]]　~[5 4]

[1 ~ 10]

"Functor"

mapped: [* 2] [1 2 3 4 5] 

"Applicative"

Applied: [| [* 2] [1 ~ 5] [6 ~ 10]|]

"畳み込みは、展開演算子~を用いて記述する。"

folded: [+] ~[1 2 3 4 5]

