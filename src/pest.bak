start       = { SOI ~ expression* ~ EOI }

expression  = {
  export
  | assign
  | lambda
  | product
  | or_xor
  | and
  | not
  | compare
  | add_sub
  | mul_div
  | power
  | factrial
  | coproduct
  | literal
  | get
  | import
  | block
}

block = {
  (indent_line ~ expression+)+ ~ NEWLINE
  | "[" ~ expression+ ~ "]"
  | "{" ~ expression+ ~ "}"
  | "(" ~ expression+ ~ ")"
  | "[" ~ (indent_line ~ expression+)+ ~ "]"
  | "{" ~ (indent_line ~ expression+)+ ~ "}"
  | "(" ~ (indent_line ~ expression+)+ ~ ")"
}

indent_line = {
  NEWLINE ~ indent
}

indent      = { "\t" | "  " }

prefix      = {
  f_export
  | f_not
  | f_get
  | f_spread
}

infix_L     = {
  f_product
  | f_coproduct
  | f_or
  | f_xor
  | f_and
  | f_add
  | f_sub
  | f_mul
  | f_div
  | f_mod
  | f_spread
  | f_get
}

compare_op  = {
  f_less
  | f_less_eq
  | f_eq
  | f_neq
  | f_more_eq
  | f_more
}

infix_R     = {
  f_assign
  | f_power
}

postfix     = { f_factrial }

f_export    = { "#" }
f_assign    = { ":" }
f_lambda    = { "?" }
f_product   = { "," }
f_coproduct = { " " }
f_or        = { "|" }
f_xor       = { ";" }
f_and       = { "&" }
f_not       = { "!" }
f_less      = { "<" }
f_less_eq   = { "<=" }
f_eq        = { "=" | "==" }
f_neq       = { "!=" }
f_more_eq   = { ">=" }
f_more      = { ">" }
f_add       = { "+" }
f_sub       = { "-" }
f_mul       = { "*" }
f_div       = { "/" }
f_mod       = { "%" }
f_power     = { "^" }
f_factrial  = { "!" }
f_spread    = { "~" }
f_get       = { "@" }
rest_param  = { "~" }
p_holder    = { "@" }
otherwise   = { "_" }

export      = { f_export ~ expression+ }

assign      = { ident ~ f_assign ~ expression+ }

lambda      = {
  ident ~ (ident | f_spread ~ ident)* ~ f_lambda ~ expression+
  | arg_list
  | point_free
  | place_holdered
  | match_case
}

arg_list    = {
  args ~ (infix_L | compare_op | infix_R) ~ (args | expression)*
  | (args | expression)* ~ (compare_op | infix_L | infix_R) ~ args
  | prefix ~ args
  | args ~ postfix
  | f_lambda ~ args
}

args        = @{ p_holder ~ (ASCII_DIGIT)* ~ rest_param? }

point_free  = {
  (infix_L | compare_op | infix_R) ~ literal
  | (logic | number | charactor | string) ~ (infix_L | compare_op | infix_R)
  | (infix_L | compare_op | infix_R) ~ ((NEWLINE ~ "\t" ~ expression+)+ | expression+) ~ NEWLINE
  | prefix
}

place_holdered = {
  (ident | prefix | infix_L | infix_R) ~ (p_holder | expression)+
  | p_holder ~ postfix
  | f_lambda ~ p_holder
}

match_case = {
  (ident | f_spread ~ ident)* ~ f_lambda ~ (indent_line ~ ((logic | number | charactor | string | point_free | otherwise) ~ f_assign ~ expression+))+
}

l_product   = {
  lambda
  | or_xor
  | and
  | not
  | compare
  | add_sub
  | mul_div
  | power
  | factrial
  | logic
  | number
  | string
  | dictionary
  | ident
  | block
}

product     = {
  l_product ~ (f_product ~ expression)+
  | (indent ~ (expression ~ f_product))+ ~ NEWLINE
  | "[" ~ (expression ~ f_product)* ~ expression ~ "]"
  | "{" ~ (expression ~ f_product)* ~ expression ~  "}"
  | "(" ~ (expression ~ f_product)* ~ expression ~  ")"
  | "[" ~ (indent_line ~ (expression ~ f_product))+ ~ indent_line ~ expression ~ "]"
  | "{" ~ (indent_line ~ (expression ~ f_product))+ ~ indent_line ~ expression ~ "}"
  | "(" ~ (indent_line ~ (expression ~ f_product))+ ~ indent_line ~ expression ~ ")"
  | (ident | charactor | number) ~ f_spread ~ (ident | charactor | number)
}

or_xor      = {
  and ~ f_or ~ or_xor
  | and ~ f_xor ~ or_xor
  | and
}

and         = {
  not ~ f_and ~ and
  | not
}

not        = {
  f_not ~ (compare | logic | ident)
  | compare
  | logic
  | ident
}

compare     = {
    add_sub ~ f_less ~ add_sub
  | add_sub ~ f_less_eq ~ add_sub
  | add_sub ~ f_eq ~ add_sub
  | add_sub ~ f_neq ~ add_sub
  | add_sub ~ f_more_eq ~ add_sub
  | add_sub ~ f_more ~ add_sub
  | add_sub
}

add_sub     = {
  mul_div ~ f_add ~ add_sub
  | mul_div ~ f_sub ~ add_sub
  | mul_div
}

mul_div     = {
  power ~ f_mul ~ mul_div
  | power ~ f_div ~ mul_div
  | power ~ f_mod ~ mul_div
  | power
}

power       = {
  factrial ~ f_power ~ power
  | factrial
}

factrial    = {
  (number | ident) ~ f_factrial
  | number
  | ident
}

coproduct   = {
  compose_L
  | concat
}

compose_L   = {
  (lambda | ident) ~ (f_coproduct ~ compose_L)+ 
  | point_free ~ compose_L+
}

concat      = {
  cat_list
  | cat_string
}

cat_list    = {
  (product | dictionary | ident) ~ (f_coproduct ~ (product |dictionary | ident))+
}

cat_string  = {
  charactor+ ~ (f_coproduct ~ ident | cat_string+)*
  | string+ ~ cat_string*
}

get         = {
  f_get ~ ident ~ block*
  | (ident ~ f_get)+ ~ ident
}

import      = {
  f_get ~ (ident | string)
}

literal     = @{
  logic
  | number
  | charactor
  | string
  | list
  | dictionary
  | f_spread ~ (dictionary | product)
  | ident
  | none
}

logic       = {
  true
  | false
}

true        = @{ "$" }
false       = @{ "\\" }


number      = @{
  natural
  | integer
  | real
  | hex
}

natural     = @{ ASCII_DIGIT+ }

integer     = @{ "-"? ~ natural }

real        = @{ integer ~ "." ~ natural }

hex         = @{ "0x"~ ASCII_HEX_DIGIT+ }

charactor   = @{ "'" ~ ANY }

string      = { "`" ~ (!NEWLINE ~ ANY)* ~ "`" }

list        = {
  product
  | cat_list
  | (ident | charactor | number) ~ f_spread ~ (ident | charactor | number) ~ product
  | unit
}

unit        = { otherwise }

dictionary  = {
  assign ~ (f_product ~ assign)+
  | (indent_line ~ (assign | dictionary))+ ~ NEWLINE
  | "[" ~ (indent_line ~ (assign | dictionary))+ ~ "]"
  | "{" ~ (indent_line ~ (assign | dictionary))+ ~ "}"
  | "(" ~ (indent_line ~ (assign | dictionary))+ ~ ")"
}

ident       = {
  (ASCII_ALPHANUMERIC | "_")+ ~ (ASCII_ALPHA | "_")
  | f_spread ~ string
}

none        = { otherwise }