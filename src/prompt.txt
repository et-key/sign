随伴関手定理によって、スカラー型の推論以外の考慮は必要ありません。
あらゆる空白が、関数の評価を表します。
関数は全て、無名関数です。

演算子の定義は、優先度が高い順で…

, リスト構築演算子
  ラムダ含む関数の評価、（冪、直和）
~ 展開演算及び、リストの１次元平坦化
' 連想配列や配列のキー指定
[!] ビット否定
[&] ビットアンド
[|] [^] ビットor ビットxor
** べき乗（左単位元とする、理由としては巨大数を扱う必要が希少なため、分数指定でべき乗根）
! 階乗 （後置）
* / % 乗算、除算、剰余
+ - 加算、減算
< > = 比較演算
! 論理否定（前置）
& 論理積
| ^ 論理和 排他的論理和
? 条件分岐 左辺は真偽値、右辺はタプルになる
; ラムダ定義 左辺のSymbol列と右辺の計算式で構成
: 定数宣言 左辺のSymbolと右辺は全てのデータとなる。

実際にはこれら演算子はセルフホスト時にライブラリとして分離して再実装する予定。

{} で囲まれたものは全てデータとして前提する。

{a : b, c : d, …}の形式は、辞書型としての定義。

{x | y | …} の形式は、列挙型であり、ある抽象型との和集合として判断するだけの存在なので、ラムダによる再定義可能なものでもある。

{}で,区切りになるものは、リスト定義。

[]で囲まれた任意の文字列は、カスタム演算子である。
理由として、カスタム演算子は１次元以上のリストや構造に対する演算子となるため、見た目にもわかりやすい。

_で始まる任意の文字列は、全て命名用のSymbolであり、カスタム演算子としても使える。

通常のIdentとして定義できるものは全てSymbolである。

任意の文字は速やかにSymbolと同一として評価可能
