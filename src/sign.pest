grammar;

expression = _{
    (expression+ ~ suffix)
    | (literal ~ coproduct_evaluate_op ~ (infix_l | infix_r) ~ coproduct_evaluate_op ~ expression+)
    | (prefix ~ expression+)
    | (literal ~ (coproduct_evaluate_op ~ expression)*)
    | "(" ~ expression+ ~ ")" ~ coproduct_evaluate_op ~ expression*
    | "{" ~ expression+ ~ "}" ~ coproduct_evaluate_op ~ expression*
    | "[" ~ expression+ ~ "]" ~ coproduct_evaluate_op ~ expression*
}

// 基本的な構文規則
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

// リテラルの定義
literal = { none | boolean | number | charactor | string | list | table | lambda | identifier }

none = @{ "_" ~ "0" ~ "_" }

boolean = { true | false }
true = @{ "_" ~ "T" ~ "_" }
false = @{ "_" ~ "F" ~ "_" }

// 数値
number = { integer | float | hex | bit }
integer = @{ "-"? ~ ("0".."9")+ }
float = @{ "-"? ~ ("0".."9")+ ~ "." ~ ("0".."9")* }
hex = @{ "#" ~ (("0".."9") | ("a".."f") | ("A" ~ "F")) ~ (("0".."9") | ("a".."f") | ("A" ~ "F"))+ }
bit = @{ "#" ~ "b" ~ ("0" | "1")+ }

// 識別子の定義
identifier = @{ ("a".."z" | "A".."Z" | "_") ~ ("a".."z" | "A".."Z" | "0".."9" | "_")* }

// 文字列
content = { (!("\"" ~ WHITESPACE) ~ ANY)* }
string = { "\"" ~ content ~ "\"" ~ WHITESPACE }

// 文字
charactor = { "`" ~ ANY }

// 積
list = { expression ~ (product_op ~ expression)* }

// 関数
// 型システムのために、関数の型は構文で出来る限り推論する

prefix = { not_op | increment_op | decrement_op | spread_op }

suffix = { factrial_op | increment_op | decrement_op | spread_op | coproduct_evaluate_op }

infix_l = { define_op | lambda_op | product_op | condition_op | or_op | and_op | compare_op | additive_op | multiplicative_op }

infix_r = { pow_op | coproduct_evaluate_op }

define_op = { ":" }

set = { identifier ~ define_op ~ expression+ }

lambda_op = { ";" }
lambda = { (identifier ~ ((coproduct_op | product_op) ~ identifier)* ~ lambda_op ~ expression) | op_fn }
op_fn = { prefix | (binary_op | (expression ~ (infix_l | infix_r)) | ((infix_l | infix_r) ~ expression)) | (suffix ~ "_" ) | (lambda ~ ("_" | literal)* ~ "_" ) }

product_op = { "," }

selection_op = { "?" }

get_op = { "'" }

or_xor_op = { "|" | "^" }

and_op = { "&" }

not_op = { "!" }

compare_op = { "<" | ">" | "=" }

additive_op = { "+" | "-" }

multiplicative_op = { "*" | "/" | "%" }

factrial_op = { "!" }

pow_op = { "^" }

coproduct_evaluate_op = { " " }

spread_op = { "~" }