grammar;

// 基本的な構文規則
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

// リテラルの定義

true = { "_T_" }
false = { "_F_" }
null = { "_0_" }

// 数値
number = { integer | float }
integer = @{ "-"? ~ ("0".."9")+ }
float = @{ "-"? ~ ("0".."9")+ ~ "." ~ ("0".."9")* }

// 識別子の定義
identifier = @{ ("a".."z" | "A".."Z" | "_") ~ ("a".."z" | "A".."Z" | "0".."9" | "_")* }

// 文字列
content = { (!("\"" ~ WHITESPACE) ~ ANY)* }
string = { "\"" ~ content ~ "\"" ~ WHITESPACE }

// 文字
charactor = { "`" ~ ANY }

// 積
list = { expression ~ ("," ~ expression)* }

// 関数
function = { lamda | op_fn | prefix | suffix ~ "_"}

lamda = { identifier ~ ((" " | ",") ~ identifier)* ~ ";" ~ expression }
op_fn = {prefix | (binary_op | (expression ~ binary_op) | (binary_op ~ expression)) | (suffix ~ "_" )}

unary_op = { prefix | suffix }

prefix = { not_op | spread_op }

binary_op = { infix_l | infix_r }

infix_l = { | or_op | xor_op | and_op | compare_op | add_op | mul_op }

compare_op = { "<" | "=" | ">" }

add_op = { "+" | "-" }

mul_op = { "*" | "/" | "%" }

infix_r = { pow_op }

define_op = { ":" }

lambda_op = { ";" }

product_op = { "," }

condition_op = { "?" }

or_op = { "|" }

xor_op = { "^" }

and_op = { "&" }

not_op = { "!" }

compare = 
coproduct_op = { " " }


// 基本的な要素：リテラル、括弧で囲まれた式

primary = {
    literal
    | "(" ~ expression ~ ")"
    | "{" ~ expression ~ "}"
    | "[" ~ expression ~  "]"
}

// 単項演算式の定義
not_expr = { not* ~ primary }

// 論理積（AND）式の構築
and_expr = _{
    not_expr ~ ("&" ~ not_expr)*
}

// 排他的論理和（XOR）式の構築
xor_expression = _{
    and_expression ~ ("^" ~ and_expression)*
}

// 論理和（OR）式の構築
or_expression = _{
    xor_expression ~ ("|" ~ xor_expression)*
}

// タプル生成式の定義
tuple_expression = _{
    or_expression ~ (product_op ~ or_expression)+
}

// 条件分岐式の定義
conditional_expression = _{
    or_expression ~ conditional_op ~ tuple_expression
}

// 式の定義を更新して、条件分岐式を含める
expression = {
    conditional_expression | tuple_expression | or_expression
}
