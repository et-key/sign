// sign.pest

WHITESPACE = _{ " " | "\t" | NEWLINE }

input = { SOI ~ expression* ~ EOI }

expression = _{
    export
    | assignment
    | function
    | postSpread
    | product
    | select
    | not
    | and
    | or_xor
    | compare
    | add_sub
    | mul_div
    | power
    | factorial
    | get
    | preSpread
    | eval_compose
    | literal
    | import
}

import = { "@" ~ ident | "@" ~ string }

literal = _{
    number
    | hex
    | bit
    | logic
    | char
    | awaiting_or_null
    | higherExpr
}

number = @{ "-"? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT*)? }
hex = @{ "0x" ~ ASCII_HEX_DIGIT+ }
bit = @{ "0b" ~ ASCII_BIN_DIGIT+ }
logic = { true | false }
true = { "_T_" }
false = { "_F_" }
char = @{ "`" ~ ANY }
string = { "\"" ~ (!("\t" | NEWLINE) ~ ANY)* ~ "\"" ~ ("\t" | NEWLINE) }
awaiting_or_null = { "_" }
higherExpr = _{
    "[" ~ expression+ ~ "]"
    | "{" ~ expression+ ~ "}"
    | "(" ~ expression+ ~ ")"
    | string
    | list
    | dict
    | function
    | ident
}

preSpread = { "~" ~ (higherExpr | ident) }

get = { list_get | dict_get }
list_get = { ident ~ "'" ~ number }
dict_get = { ident ~ "'" ~ ident | ident ~ "'" ~ string }

eval_compose = _{
    eval
    | pipe
    | compose
}

eval = { function ~ WHITESPACE ~ expression }
pipe_eval = {
    (number | hex | bit | logic | char | string | list | dict | ident) ~ WHITESPACE ~ function+
    | "~" ~ (list | dict | ident) ~ WHITESPACE ~ function+
}
pipish_compose_sum = { literal ~ (WHITESPACE ~ literal)+ }

factorial = { power ~ "!" }
power = { mul_div ~ "**" ~ power }

mul_div = _{ mul | div | mod }

mul = { add_sub ~ "*" ~ mul_div }
div = { add_sub ~ "/" ~ mul_div }
mod = { add_sub ~ "%" ~ mul_div }

add_sub = _{ add | sub }

add = { number ~ "+" ~ add_sub }
sub = { number ~ "-" ~ add_sub }

compare = _{
    less
    | lessEq
    | equal
    | notEq
    | moreEq
    | more
}

less = { number ~ "<" ~ number }
lessEq = { number ~ "<=" ~ number }
equal = { number ~ "=" ~ number }
notEq = { number "!=" number }
moreEq = { number ~ ">=" ~ number }
more = { number ~ ">" ~ number }

not = { "!" ~ not }
and = { not ~ "&" ~ and }

or_xor = _{
    or
    | xor
}

or = { logic ~ "|" ~ or_xor }
xor = { logic ~ "^" ~ or_xor }

select = _{
    logic_select
    | dict_select
    | list_select
    | dict_ident_select
    | dict_string_select
}

logic_select = { logic ~ "?" ~ list }
dict_select = { logic ~ "?" ~ dict }
list_select = { number ~ "?" ~ list }
dict_ident_select = { ident ~ "?" ~ dict }
dict_string_select = { string ~ "?" ~ dict }

product = { expression ~ ("," ~ expression)+ }
list = { product }
dict = { assignment ~ ("," | "\n") ~ assignment* }

function = _{
    infix_function
    | prefix_function
    | postfix_function
    | function_def
}

infix_function = { infix_operator ~ expression* | expression* ~ infix_operator }
infix_operator = _{ "+" | "-" | "*" | "/" | "%" | "**" | "&" | "|" | "^" | "=" | "!=" | "<" | ">" | "<=" | ">=" | "?" | "," | ":" }

prefix_function = { prefix_operator }
prefix_operator = { "!" }

postfix_function = { "_" ~ postfix_operator }
postfix_operator = { "!" }

function_def = { ident+ ~ ";" ~ expression }

assignment = { ident ~ ":" ~ expression }
export = { "#" ~ assignment }

ident = @{ (ASCII_ALPHANUMERIC | "_")+}
