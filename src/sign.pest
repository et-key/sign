start       = { SOI ~ expression* ~ EOI }

expression  = {
  export
  | assign
  | lambda
  | product
  | or_xor
  | and
  | not
  | compare
  | add_sub
  | mul_div
  | power
  | factrial
  | coproduct
  | literal
  | get_import
  | block
}

block = {
  (indent_line ~ expression+)+ ~ NEWLINE
  | "[" ~ expression+ ~ "]"
  | "{" ~ expression+ ~ "}"
  | "(" ~ expression+ ~ ")"
  | "[" ~ (NEWLINE ~ indent ~ expression+)+ ~ "]"
  | "{" ~ (NEWLINE ~ indent ~ expression+)+ ~ "}"
  | "(" ~ (NEWLINE ~ indent ~ expression+)+ ~ ")"
}

indent_line = {
  NEWLINE ~ indent+
}

indent      = { "\t" | "  " }

prefix      = { f_export | f_not | f_import | f_spread }
infix_L     = { f_product | f_coproduct | f_or | f_xor | f_and | f_add | f_sub | f_mul | f_div | f_mod | f_spread }
compare_op  = { f_less | f_less_eq | f_eq | f_neq | f_more_eq | f_more }
infix_R     = { f_assign | f_power }
postfix     = { f_factrial }

f_export    = { "#" }
f_assign    = { ":" }
f_lambda    = { "?" }
f_product   = { "," }
f_coproduct = { " " }
f_or        = { "|" }
f_xor       = { ";" }
f_and       = { "&" }
f_not       = { "!" }
f_less      = { "<" }
f_less_eq   = { "<=" }
f_eq        = { "=" | "==" }
f_neq       = { "!=" }
f_more_eq   = { ">=" }
f_more      = { ">" }
f_add       = { "+" }
f_sub       = { "-" }
f_mul       = { "*" }
f_div       = { "/" }
f_mod       = { "%" }
f_power     = { "^" }
f_factrial  = { "!" }
f_spread    = { "~" }
f_import    = { "@" }

export      = { f_export ~ expression* }

assign      = { ident ~ f_assign ~ expression+ }

lambda      = {
  ident ~ (ident | f_spread ~ ident)* ~ f_lambda ~ expression+
  | arg_list
  | point_free
  | place_holder
}

arg_list    = {
  args ~ (infix_L | compare_op | infix_R) ~ (args | expression)*
  | (args | expression)* ~ (compare_op | infix_L | infix_R) ~ args
  | prefix ~ args
  | args ~ postfix
  | f_lambda ~ args
}

args        = @{ "_" ~ (ASCII_DIGIT)* ~ "~"? }

point_free  = {
  (infix_L | infix_R) ~ ((NEWLINE ~ "\t" ~ expression+)+ | expression+) ~ NEWLINE
  | prefix
}

place_holder = {
  (ident | prefix | infix_L | infix_R) ~ ("_" | expression)* ~ "_" ~ ("_" | expression)*
  | "_" ~ postfix
}

l_product   = {
  lambda
  | or_xor
  | and
  | not
  | compare
  | add_sub
  | mul_div
  | power
  | factrial
  | logic
  | number
  | string
  | dictionary
  | ident
}

product     = {
  l_product ~ (f_product ~ expression)+
  | (indent_line ~ (expression ~ f_product))+ ~ NEWLINE
  | "[" ~ (expression ~ f_product)+ ~ "]"
  | "{" ~ (expression ~ f_product)+ ~ "}"
  | "(" ~ (expression ~ f_product)+ ~ ")"
  | "[" ~ (NEWLINE ~ indent ~ (expression ~ f_product))+ ~ "]"
  | "{" ~ (NEWLINE ~ indent ~ (expression ~ f_product))+ ~ "}"
  | "(" ~ (NEWLINE ~ indent ~ (expression ~ f_product))+ ~ ")"

}

or_xor      = {
  and ~ f_or ~ or_xor
  | and ~ f_xor ~ or_xor
  | and
}

and         = {
  not ~ f_and ~ and
  | not
}

not        = {
  f_not ~ (compare | logic | ident)
  | compare
  | logic
  | ident
}

compare     = {
    add_sub ~ f_less ~ add_sub
  | add_sub ~ f_less_eq ~ add_sub
  | add_sub ~ f_eq ~ add_sub
  | add_sub ~ f_neq ~ add_sub
  | add_sub ~ f_more_eq ~ add_sub
  | add_sub ~ f_more ~ add_sub
  | add_sub
}

add_sub     = {
  mul_div ~ f_add ~ add_sub
  | mul_div ~ f_sub ~ add_sub
  | mul_div
}

mul_div     = {
  power ~ f_mul ~ mul_div
  | power ~ f_div ~ mul_div
  | power ~ f_mod ~ mul_div
  | power
}

power       = {
  factrial ~ f_power ~ power
  | factrial
}

factrial    = {
  (number | ident) ~ f_factrial
  | number
  | ident
}

coproduct   = {
  compose_L
  | concat
}

compose_L   = {
  (lambda | ident) ~ (f_coproduct ~ compose_L)+ 
  | point_free ~ compose_L+
}

concat      = {
  cat_list
  | cat_string
}

cat_list    = {
  (product | ident) ~ (f_coproduct ~ (product | ident))+
}

cat_string  = {
  charactor+ ~ (f_coproduct ~ ident | cat_string+)*
  | string+ ~ cat_string*
}


literal     = @{
  logic
  | number
  | string
  | list
  | dictionary
  | ident
}

logic       = {
  true
  | false
}

true        = @{ "$" }
false       = @{ "\\" }

number      = @{
  natural
  | integer
  | real
  | hex
}

natural     = @{ ASCII_DIGIT+ }

integer     = @{ "-"? ~ natural }

real        = @{ integer ~ "." ~ natural }

hex         = @{ "0x"~ ASCII_HEX_DIGIT+ }

charactor   = @{ "'" ~ ANY }

string      = { "`" ~ (!NEWLINE ~ ANY)* ~ "`" }

list        = { product | cat_list }

dictionary  = { 
  | (indent_line ~ dictionary)+ ~ NEWLINE
  | "[" ~ (NEWLINE ~ indent ~ dictionary)+ ~ "]"
  | "{" ~ (NEWLINE ~ indent ~ dictionary)+ ~ "}"
  | "(" ~ (NEWLINE ~ indent ~ dictionary)+ ~ ")"
  | assign
}

ident       = {
  (ASCII_ALPHANUMERIC | "_")+ ~ (ASCII_ALPHA | "_")
  | f_spread ~ string
}

get_import      = {
  f_import ~ ident ~ block*
  | (ident ~ f_import)+ ~ ident
}
