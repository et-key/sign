Expression = Evaluate | Define ;

Define = Pair | Constant | List | Map | Enum | Lambda | Number | String | Boolean | Character | Import | Export | ( "(" Expression ")" ) ;
Pair = ( Evaluate | Constant | List | Map | Enum | Lambda | Number | String | Boolean | Character | Import | Export | ( "(" Expression ")" )) {"," ( Evaluate | Define ) } ;
Constant = ( Identifier | Character | String ) ":" Expression ;
List = Pair+ | "[" Expression* "]" ;
Map = "[" Constant { ( "\n" | "," ) Constant } "]" ;
Enum = "[" Expression { "|" Expression } "]" ;
Lambda = ( Argument+ ";" Expression+ ) | Operator | PartialApply ;

Argument = Identifier+ | Yet+ ;

Operator = UnaryOP | BinaryOp ;
UnaryOP = Not | Flat ;
BinaryOp = If | Xor | Or | And | CmpOp | AddOp | MulOp | Exp | Point | Iterate | Construct ;
CmpOp = Equal | NotEqual | Less | More | OrLess | OrMore ;
AddOp = Add | Sub ;
MulOp = Mul | Div | Mod ;

If = "?" ;
Xor = "^" ;
Or = "|" ;
And = "&" ;
Not = "!" ;

Equal = "=" ;
NotEqual = "!=" ;
Less = "<" ;
More = ">" ;
OrLess = "<=" ;
OrMore = ">=" ;

Add = "+" ;
Sub = "-" ;

Mul = "*" ;
Div = "/" ;
Mod = "%" ;

Exp = "**" ;

Point = "'" ;

Flat = "~" ;

Iterate = "~" ;

PartialApply = PartialLeft | PartialRight | (( Identifier | "(" Lambda ")" ) ( Expression* Yet+ ( Expression* | Yet* ))) ;

PartialLeft = PLIf | PLXor | PLOr | PLAnd | PLCmp | PLAdd | PLMul | PLExp | PLPoint ;
PLIf  = XOrExpr If ;
PLXor = OrExpr Xor ;
PLOr  = AndExpr Or ;
PLAnd = NotExpr And ;
PLCmp = AdditiveExpr CmpOp ;
PLAdd = MultiplicativeExpr AddOp ;
PLMul = ExponentialExpr MulOp ;
PLExp = Define Exp ;
PLPoint = ( Map | List | Identifier ) Point ;
PLIterate = Number Iterate ;

PartialRight = PRIf | PRXor | PROr | PRAnd | PRCmp | PRAdd | PRMul | PRExp | PRPoint ;
PRIf = If Pair ;
PRXor = Xor XorExpr ;
PROr  = Or OrExpr ;
PRAnd = And AndExpr ;
PRCmp = CmpOp AdditiveExpr ;
PRAdd = AddOp AdditiveExpr ;
PRMul = MulOp MultiplicativeExpr ;
PRExp = Exp ExponentialExpr ;
PRPoint = Point ( ( String | Identifier  ) | PointExpr ) ;
PRIterate = Iterate Number ;

Number = Int | UInt | Float ;

UInt = [0-9]+ ;
Int = ["+" | "-"] UInt ;
Float = Int "." UInt ;

Boolean = "_T_" | "_F_" ;
Character = "`" . ;
String = "\"" . "\"\n" | "'`" . "`'" | Character+ ;

Yet = "_" ;
Identifier = [_a-zA-Z][_a-zA-Z0-9]* ;

Import = "@" ( ( String | Identifier ) ( String | Identifier )* ) ;

Export = "#" ( Identifier | String ) ;

Evaluate = flattenExpr | (( Identifier | "(" Lambda ")" ) Expression ) | ( Define Identifier Expression ) ;

flattenExpr = List Flat | Decision ;

Decision = ( XorExpr If Decision ) | XorExpr ;

XorExpr = ( OrExpr Xor XorExpr ) | OrExpr ;

OrExpr = ( AndExpr Or OrExpr ) | AndExpr ;

AndExpr = ( NotExpr And AndExpr ) | NotExpr ;

NotExpr = ( "!" NotExpr ) | ComparisonExpr | Boolean ;

ComparisonExpr = ( AdditiveExpr CmpOp AdditiveExpr ) | AdditiveExpr ;

AdditiveExpr = ( MultiplicativeExpr Add AdditiveExpr ) | MultiplicativeExpr | Character ;

MultiplicativeExpr = ( ExponentialExpr Mul MultiplicativeExpr ) | ExponentialExpr ;

ExponentialExpr = (( PointExpr | Number ) Exp ExponentialExpr ) | Number | Identifier | "(" AdditiveExpr ")" ;

PointExpr = (( Map | List | Identifier ) Point (( ( String | Int | Identifier ) ) | PointExpr )) | spreadExpr ;

spreadExpr = Flat List | iterateExpr | Decision ;

iterateExpr = Number Iterate Number | Number | Identifier | ( "(" Expression ")" ) ;
