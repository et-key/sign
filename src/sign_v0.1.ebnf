Expression = Pair | Evaluate | Define ;

Pair = ( Evaluate | Define ) { ","  ( Evaluate | Define | Pair ) } ;

Define = Constant  | List | Map | Enum | Lambda | Literal | Yet | "(" Expression ")";
Constant = Identifier ":" Expression ;
List = Pair+ | "[" Expression* "]" ;
Map = "{" constant { ( "\n" | "," ) constant } "}" ;
Enum = "{" Expression { "|" Expression } "}"
Lambda = ( Argument+ ";" Expression ) | Operator | PartialAplly ;

Argument = Identifier+ | Yet+;

Operator = UnaryOP | BinaryOp ;
UnaryOP = "!" ;
BinaryOp = "?" | "^" | "|" | "&" | CmpOp | AddOp | MulOp | "**" ;
CmpOp = "=" | "!=" | "<" | ">" | "<=" | ">=" ;
AddOp = "+" | "-" ;
MulOp = "*" | "/" | "%" ;

PartialAplly = PartialLeft | PartialRight | (( Identifier | "(" Lambda ")" ) ( Expression* Yet+ ( Expression* | Yet* ))) ;

PartialLeft = PLIf | PLXor | PLOr | PLAnd | PLCmp | PLAdd | PLMul | PLExp ;
PLIf  = XOrExpr "?" ;
PLXor = OrExpr "^" ;
PLOr  = AndExpr "|" ;
PLAnd = NotExpr "&" ;
PLCmp = AdditiveExpr CmpOp ;
PLAdd = MultiplicativeExpr AddOp ;
PLMul = ExponentialExpr MulOp ;
PLExp = Define "**" ;

PartialRight = PRIf | PRXor | PROr | PRAnd | PRCmp | PRAdd | PRMul | PRExp ;
PRIf = "?" Pair ;
PRXor = "^" XorExpr ;
PROr  = "|" OrExpr ;
PRAnd = "&" AndExpr ;
PRCmp = CmpOp AdditiveExpr ;
PRAdd = AddOp AdditiveExpr ;
PRMul = MulOp MultiplicativeExpr ;
PRExp = "**" ExponentialExpr ;

Yet = "_" ;

Evaluate = Decision ;

Decision = ( XOrExpr PRIf ) | ( PLIf Pair ) | XOrExpr ;
XorExpr = ( OrExpr PRXor ) | ( PLXor XOrExpr ) | OrExpr ;
OrExpr = ( AndExpr PROr ) | ( PLOr AndExpr ) | AndExpr ;
AndExpr = ( NotExpr PRAnd ) | ( PLAnd AndExpr ) | NotExpr ;
NotExpr = ( "!" NotExpr ) | ComparisonExpr | Boolean ;
ComparisonExpr = ( AdditiveExpr PRCmp ) | ( PLCmp AdditiveExpr ) | AdditiveExpr ;
AdditiveExpr = ( MultiplicativeExpr PRAdd ) | ( PLAdd AdditiveExpr ) | MultiplicativeExpr ;
MultiplicativeExpr = ( ExponentialExpr PRMul ) | ( PLMul MultiplicativeExpr ) | ExponentialExpr ;
ExponentialExpr = ( Define PRExp ) | ( PLExp MultiplicativeExpr ) | Define ;
PrimaryExpr ::= Literal | Identifier | Tuple | FunctionCall | AnonymousFunction
Literal ::= Number | String | Boolean | Character
Identifier ::= [_a-zA-Z][_a-zA-Z0-9]*

Boolean ::= "_t_" | "_f_"
Character ::= "`" .
String ::= "\"" . "\"\n" | "'`" . "`'" | Character+
