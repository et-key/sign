/*
| 優先順位 | 記号 | 位置 | 機能 | 自然な意味 | 操作的意味論 |
| 1 | `#` | 前置 | export | ハッシュタグ（公開・発見可能） | 名前を外部から発見可能にする |
| 2 | `:` | 中置※ | define | 即ち（同一視） | 左辺の名前を右辺の値に束縛 |
| 3 | `#` | 中置 | output | ハッシュタグ（関連付け） | アドレスにデータを関連付ける |
| 4 | ` ` | 中置 | apply | 余積（連接） | 関数適用 |
| 5 | ` ` | 中置 | compose | 余積（連接） | 左結合な関数合成 |
| 6 | ` ` | 中置 | push | 余積（連接） | リストへ追加 |
| 6 | ` ` | 中置 | concat | 余積（連接） | リスト結合 |
| 6 | ` ` | 中置 | construct | 余積（連接） | 左結合なリスト構築 |
| 7 | `?` | 中置※ | lambda | 問いかけ（どうするか？） | 関数定義 |
| 8 | `,` | 中置※ | product | 積（構造的組み立て） | 右結合なリスト構築 |
| 9 | `~` | 中置 | range | around（範囲のその辺り） | 範囲リスト構築 |
| 10 | `~` | 前置 | continuous | around（その辺り一帯） | 連続リスト構築 |
| 11 | `|` | 中置 | or | または（通路） | 論理和（短絡評価） |
| 12 | `;` | 中置 | xor | 排他的関係 | 排他的論理和 |
| 13 | `&` | 中置 | and | かつ（結合） | 論理積（短絡評価） |
| 14 | `!` | 前置 | not | 否定 | 論理否定 |
| 15 | `<` | 中置 | less | より小さい | 比較演算 |
| 15 | `<=` | 中置 | less_equal | 以下 | 比較演算 |
| 15 | `=` | 中置 | equal | 等しい | 比較演算 |
| 15 | `==` | 中置 | equal | 等しい | 比較演算 |
| 15 | `>=` | 中置 | more_equal | 以上 | 比較演算 |
| 15 | `>` | 中置 | more | より大きい | 比較演算 |
| 15 | `!=` | 中置 | not_equal | 等しくない | 比較演算 |
| 16 | `+` | 中置 | add | 加法 | 算術演算 |
| 16 | `-` | 中置 | sub | 減法 | 算術演算 |
| 17 | `*` | 中置 | mul | 乗法 | 算術演算 |
| 17 | `/` | 中置 | div | 除法 | 算術演算 |
| 17 | `%` | 中置 | mod | 剰余 | 算術演算 |
| 18 | `^` | 中置※ | pow | 冪乗 | 指数演算 |
| 19 | `!` | 後置 | factorial | 階乗 | 階乗演算 |
| 20 | `|_|` | 囲み | abs | 絶対値 | 絶対値演算 |
| 21 | `~` | 後置 | expand | around（周辺に広げる） | 展開 |
| 22 | `$` | 前置 | address | お金（価値の抽象化） | アドレス取得 |
| 23 | `'` | 中置 | get | 所有格（'s のs省略） | 構造から値を取得 |
| 23 | `@` | 中置* | get | at（〜において） | 構造から値を取得 |
| 24 | `@` | 前置 | input | at（〜において） | アドレスからデータを取得 |
| 25 | `<<` | 中置 | 左ビットシフト | 左ビットシフト | 左ビットシフト |
| 25 | `>>` | 中置 | 右ビットシフト | 右ビットシフト | 右ビットシフト |
| 26 | `||` | 中置 | bit or | ビットマスク | ビット毎の論理和 |
| 27 | `;;` | 中置 | bit xor | ビットマスク | ビット毎の非交和 |
| 28 | `&&` | 中置 | bit and | ビットマスク | ビット毎の論理積 |
| 29 | `!!` | 前置 | bit not | ビット反転 | ビット毎の否定 |
| 30 | `@` | 後置 | import | at（〜から） | ファイルから取得 |
| 31 | `(...)` | 囲み | block | ブロック | インラインブロック構築 |
| 31 | `{...}` | 囲み | block | ブロック | インラインブロック構築 |
| 31 | `[...]` | 囲み | block | ブロック | インラインブロック構築 |
| 31 | `\t` | 前置 | indent | インデント | インデントブロック構築 |
*/

const OperatorSemantics = {
    prefix : {
        '#' : 'export',
        '~' : 'continuous',
        '!' : 'not',
        '$' : 'address',
        '@' : 'input',
        '!!' : 'bit not',
        '\t' : 'indent'
    },
    infix : {
        ':' : 'define',
        '#' : 'output',
        lambda_list : 'apply',
        lambda_lambda : 'compose',
        list_list : 'concat',
        literal_list : 'push_left',
        list_literal : 'push_right',
        literal_literal : 'product',
        '?' : 'lambda_construct',
        ',' : 'product',
        '~' : 'range',
        '|' : 'or',
        ';' : 'xor',
        '&' : 'and',
        '<' : 'less',
        '<=' : 'less_equal',
        '=' : 'equal',
        '==' : 'equal',
        '>=' : 'more_equal',
        '>' : 'more',
        '!=' : 'not_equal',
        '+' : 'add',
        '-' : 'sub',
        '*' : 'mul',
        '/' : 'div',
        '%' : 'mod',
        '^' : 'pow',
        "'": "get",
        '@': "get",
        '<<': "left shift",
        '>>': "right shift",
        '||': "bit or",
        ';;': "bit xor",
        '&&': "bit and"
    },
    postfix : {
        '!' : 'factorial',
        '~' : 'expand',
        '@' : 'import'
    },
    surround : {
        '|_|' : 'abs'
    }
};

const OperatorPriority = {
    prefix : {
        '#' : 1,
        '~' : 10,
        '!' : 14,
        '$' : 22,
        '@' : 24,
        '!!' : 29,
        '\t' : 31
    },
    infix : {
        ':' : 2,
        '#' : 3,
        lambda_list : 4,
        lambda_lambda : 5,
        list_list : 6,
        literal_list : 6,
        list_literal : 6,
        literal_literal : 8,
        '?' : 7,
        ',' : 8,
        '~' : 9,
        '|' : 11,
        ';' : 12,
        '&' : 13,
        '<' : 15,
        '<=' : 15,
        '=' : 15,
        '==' : 15,
        '>=' : 15,
        '>' : 15,
        '!=' : 15,
        '+' : 16,
        '-' : 16,
        '*' : 17,
        '/' : 17,
        '%' : 17,
        '^' : 18,
        "'": 23,
        '@': 23,
        '<<': 25,
        '>>': 25,
        '||': 26,
        ';;': 27,
        '&&': 28
    },
    postfix : {
        '!' : 19,
        '~' : 21,
        '@' : 30
    },
    surround : {
        '|_|' : 20
    }
};

module.exports = {
    OperatorSemantics,
    OperatorPrecedence
};

